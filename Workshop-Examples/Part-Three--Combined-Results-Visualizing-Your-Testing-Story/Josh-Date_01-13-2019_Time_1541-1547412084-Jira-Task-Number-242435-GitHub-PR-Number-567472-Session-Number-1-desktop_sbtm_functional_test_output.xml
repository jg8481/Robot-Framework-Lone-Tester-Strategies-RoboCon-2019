<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190116 05:24:06.427" generator="Rebot 3.0.4 (Python 2.7.10 on darwin)">
<suite id="s1" name="Combined Results Dashboard - ">
<suite source="/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Workshop-Examples/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Hyrid-Session-Based-Test-Example-For-Desktop.robot" id="s1-s1" name="Josh tested Jira Task Number 786864 in the QA environment -- GitHub Pull Rquest Number 3456773 was deployed to that environment -- Session-Based Test number 2 for 01-13-2019 03:41 PM on Desktop -- ">
<test id="s1-s1-t1" name="SESSION-BASED TEST SETUP - DESKTOP (OR LAPTOP) : Set up this testing session and collect some information from the tester.">
<kw name="Setup Session Based Test And Gather Information">
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 16:31:55.476" html="yes" level="INFO">&lt;a href="screenshot_5.jpg"&gt;&lt;img src="screenshot_5.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 16:31:55.476" starttime="20190113 16:31:55.264"></status>
</kw>
<kw name="Pause Execution" library="Dialogs">
<doc>Pauses test execution until user clicks ``Ok`` button.</doc>
<arguments>
<arg>SESSION-BASED TEST SETUP - DESKTOP (OR LAPTOP) :\n\n\n\n This is session number ${SESSION_NUMBER}. ${TESTER_NAME}, please use this time to set up your Session-based Test for GitHub PR number ${PULL_REQUEST_NUMBER}, for Jira Task Number ${JIRA_TASK_NUMBER}. Also please be aware of any time restrictions for this session.\n\n\n\n For example, maybe you could git clone the repo of the system-under-test. \n\n After cloning the repo, here are some interesting approaches that could possibly assist you... http://google-engtools.blogspot.com/2011/12/bug-prediction-at-google.html \n\n There is also a machine learning bug prediction tool called gitrisky... https://github.com/hinnefe2/gitrisky\n\n ^ Bug hotspot detection and prediction are only suggestions, and you should not limit yourself. Read the following "A Context-Driven Approach to Automation in Testing" article for more information... http://www.satisfice.com/articles/cdt-automation.pdf \n\n\n\n When you are ready to continue press OK. \n\n There will be additional dialog boxes with required fields that will ask for more information.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:32:01.259" starttime="20190113 16:31:55.476"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>SESSION CHARTER - DESKTOP (OR LAPTOP) :\n\n\n\n Please provide a detailed but brief description of the mission statement for this test. \n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${SESSION_CHARTER}</var>
</assign>
<msg timestamp="20190113 16:44:14.322" level="INFO">${SESSION_CHARTER} = This test will cover the data processors that collect data from the enterprise service bus, and sends it to the normalizers and event store.</msg>
<status status="PASS" endtime="20190113 16:44:14.322" starttime="20190113 16:32:01.260"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>FUNCTIONAL AREAS COVERED - DESKTOP (OR LAPTOP) :\n\n\n\n Please provide a specific list of the areas that will be covered in this testing session.\n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${FUNCTIONAL_AREAS_COVERED}</var>
</assign>
<msg timestamp="20190113 16:48:48.089" level="INFO">${FUNCTIONAL_AREAS_COVERED} = message queue, event store</msg>
<status status="PASS" endtime="20190113 16:48:48.089" starttime="20190113 16:44:14.323"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>TASK BREAKDOWN - DESKTOP (OR LAPTOP) :\n\n\n\n Please follow the given example to provide metrics and information about...\n\n DURATION\n\n TEST DESIGN AND EXECUTION\n\n BUG INVESTIGATION AND REPORTING\n\n SESSION SETUP\n\n CHARTER VS. OPPORTUNITY\n\n DATA FILES\n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field, using the following example... DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 100, BUG INVESTIGATION AND REPORTING -&gt; 0, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</arg>
</arguments>
<assign>
<var>${TASK_BREAKDOWN}</var>
</assign>
<msg timestamp="20190113 16:49:00.392" level="INFO">${TASK_BREAKDOWN} = DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 100, BUG INVESTIGATION AND REPORTING -&gt; 0, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 16:49:00.392" starttime="20190113 16:48:48.089"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.393" level="INFO">${SESSION_CHARTER} = This test will cover the data processors that collect data from the enterprise service bus, and sends it to the normalizers and event store.</msg>
<status status="PASS" endtime="20190113 16:49:00.393" starttime="20190113 16:49:00.392"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.394" level="INFO">${FUNCTIONAL_AREAS_COVERED} = message queue, event store</msg>
<status status="PASS" endtime="20190113 16:49:00.394" starttime="20190113 16:49:00.393"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.395" level="INFO">${TASK_BREAKDOWN} = DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 100, BUG INVESTIGATION AND REPORTING -&gt; 0, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 16:49:00.395" starttime="20190113 16:49:00.394"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.395" level="INFO">Length is 140</msg>
<status status="PASS" endtime="20190113 16:49:00.395" starttime="20190113 16:49:00.395"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.396" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20190113 16:49:00.396" starttime="20190113 16:49:00.395"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.396" level="INFO">Length is 184</msg>
<status status="PASS" endtime="20190113 16:49:00.396" starttime="20190113 16:49:00.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.397" level="INFO">This test will cover the data processors that collect data from the enterprise service bus, and sends it to the normalizers and event store.</msg>
<status status="PASS" endtime="20190113 16:49:00.397" starttime="20190113 16:49:00.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.397" level="INFO">message queue, event store</msg>
<status status="PASS" endtime="20190113 16:49:00.398" starttime="20190113 16:49:00.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 16:49:00.398" level="INFO">DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 100, BUG INVESTIGATION AND REPORTING -&gt; 0, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 16:49:00.398" starttime="20190113 16:49:00.398"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.398" starttime="20190113 16:49:00.398"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.399" starttime="20190113 16:49:00.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.399" starttime="20190113 16:49:00.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>SESSION CHARTER...</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.400" starttime="20190113 16:49:00.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.400" starttime="20190113 16:49:00.400"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.400" starttime="20190113 16:49:00.400"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.401" starttime="20190113 16:49:00.400"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.401" starttime="20190113 16:49:00.401"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FUNCTIONAL AREAS COVERED...</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.401" starttime="20190113 16:49:00.401"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.405" starttime="20190113 16:49:00.401"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.405" starttime="20190113 16:49:00.405"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.406" starttime="20190113 16:49:00.405"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.406" starttime="20190113 16:49:00.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TASK BREAKDOWN...</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.406" starttime="20190113 16:49:00.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.407" starttime="20190113 16:49:00.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.407" starttime="20190113 16:49:00.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.408" starttime="20190113 16:49:00.408"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.408" starttime="20190113 16:49:00.408"></status>
</kw>
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 16:49:00.609" html="yes" level="INFO">&lt;a href="screenshot_6.jpg"&gt;&lt;img src="screenshot_6.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 16:49:00.609" starttime="20190113 16:49:00.408"></status>
</kw>
<status status="PASS" endtime="20190113 16:49:00.610" starttime="20190113 16:31:55.263"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Take Screenshot And Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190113 16:49:00.611" starttime="20190113 16:49:00.611"></status>
</kw>
<status status="PASS" endtime="20190113 16:49:00.611" starttime="20190113 16:49:00.610"></status>
</kw>
<status status="PASS" endtime="20190113 16:49:00.611" critical="yes" starttime="20190113 16:31:55.262"></status>
</test>
<test id="s1-s1-t2" name="SESSION-BASED TEST NOTES - DESKTOP (OR LAPTOP) : Perform a time boxed deep investigation of the given GitHub PR and check it against the Jira Task. From a desktop (or laptop).">
<kw name="Perform Session Based Test And Gather Notes">
<arguments>
<arg>${SESSION_CHARTER}</arg>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 16:49:00.780" html="yes" level="INFO">&lt;a href="screenshot_7.jpg"&gt;&lt;img src="screenshot_7.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 16:49:00.781" starttime="20190113 16:49:00.617"></status>
</kw>
<kw name="Gather Detailed Session Notes">
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>DETAILED TEST SESSION NOTES - GITHUB PR NUMBER ${PULL_REQUEST_NUMBER} - JIRA TASK NUMBER ${JIRA_TASK_NUMBER} - DESKTOP (OR LAPTOP) :\n\n\n\n Please describe everything you did while performing the test and anything you noticed while you were testing.\n\n\n\nAs a reminder, this is the SESSION CHARTER... ${SESSION_CHARTER}\n\n As a reminder, these are the FUNCTIONAL_AREAS_COVERED... ${FUNCTIONAL_AREAS_COVERED}\n\n As a reminder, these are the TASK_BREAKDOWN... ${TASK_BREAKDOWN}\n\n\n\n Follow the example, then press OK.\n\n\n\n</arg>
<arg>Please fill out this required field, using the following example... I tested _ and _ I noticed _ while I was testing &lt;enter the develper's name here&gt; helped me.</arg>
</arguments>
<assign>
<var>${DETAILED_SESSION_NOTES}</var>
</assign>
<msg timestamp="20190113 16:50:17.836" level="INFO">${DETAILED_SESSION_NOTES} = I tested the message queue using valid and invalid data. I did not see any errors in the application logs and all of the data was normalized and sent to the event store.</msg>
<status status="PASS" endtime="20190113 16:50:17.837" starttime="20190113 16:49:00.782"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 16:50:17.838" level="INFO">Length is 169</msg>
<status status="PASS" endtime="20190113 16:50:17.838" starttime="20190113 16:50:17.837"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 16:50:17.839" level="INFO">${DETAILED_SESSION_NOTES} = I tested the message queue using valid and invalid data. I did not see any errors in the application logs and all of the data was normalized and sent to the event store.</msg>
<status status="PASS" endtime="20190113 16:50:17.839" starttime="20190113 16:50:17.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 16:50:17.839" level="INFO">I tested the message queue using valid and invalid data. I did not see any errors in the application logs and all of the data was normalized and sent to the event store.</msg>
<status status="PASS" endtime="20190113 16:50:17.839" starttime="20190113 16:50:17.839"></status>
</kw>
<status status="PASS" endtime="20190113 16:50:17.839" starttime="20190113 16:49:00.781"></status>
</kw>
<kw name="Execute Manual Step" library="Dialogs">
<doc>Pauses test execution until user sets the keyword status.</doc>
<arguments>
<arg>TEST RESULT FOR GITHUB PR NUMBER ${PULL_REQUEST_NUMBER} - JIRA TASK NUMBER ${JIRA_TASK_NUMBER} - DESKTOP (OR LAPTOP) :\n\n\n\n Please make sure you read and understand all of the information in the GitHub PR and the Jira Task before continuing. If needed, pair with the developer who worked on it to make sure you understand what was done. \n\n\n\n When you are ready to move on, please press PASS or FAIL and be prepared to enter notes into the Robot Framework Dialog Box.\n\n</arg>
<arg>Please provide precise details about all of the issues you found. If necessary, you should take additional screenshots and upload them somewhere accessible (S3, Google Drive, etc.)...</arg>
</arguments>
<status status="PASS" endtime="20190113 16:50:18.971" starttime="20190113 16:50:17.840"></status>
</kw>
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 16:50:19.175" html="yes" level="INFO">&lt;a href="screenshot_8.jpg"&gt;&lt;img src="screenshot_8.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 16:50:19.176" starttime="20190113 16:50:18.971"></status>
</kw>
<status status="PASS" endtime="20190113 16:50:19.176" starttime="20190113 16:49:00.616"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Take Screenshot And Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190113 16:50:19.179" starttime="20190113 16:50:19.178"></status>
</kw>
<status status="PASS" endtime="20190113 16:50:19.179" starttime="20190113 16:50:19.177"></status>
</kw>
<doc>Additional screenshots can be found in... s3://an-s3-bucket-with-more-screenshots-of-your-testing-session/ or maybe https://drive.google.com/drive/folders/google-drive-with-more-screenshots-of-your-testing-session
The GitHub PR that was tested is... https://github.com/your_github/repo/pull/3456773
The Jira Task that was tested is... https://your-organization.atlassian.net/browse/786864</doc>
<tags>
<tag>Hybrid_Manual_Automated_Desktop_SBTM_Test</tag>
</tags>
<status status="PASS" endtime="20190113 16:50:19.179" critical="yes" starttime="20190113 16:49:00.615"></status>
</test>
<doc>This working test example and prototype is still in progress. It tries to get close to the approach that James and Jonathon Bach mention here... http://www.satisfice.com/sbtm/</doc>
<status status="PASS" endtime="20190113 16:50:19.181" starttime="20190113 16:31:55.172"></status>
</suite>
<suite source="/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Workshop-Examples/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Hyrid-Session-Based-Test-Example-For-Android.robot" id="s1-s2" name="Josh tested Jira Task Number 6798 in the QA environment -- GitHub Pull Rquest Number 3456 was deployed to that environment -- Session-Based Test number 1 for 01-13-2019 06:59 PM on Android -- ">
<kw type="setup" name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear Old Log Files</arg>
</arguments>
<kw name="Clear Old Log Files">
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//adb_log1.txt</arg>
</arguments>
<msg timestamp="20190113 18:59:58.208" html="yes" level="INFO">File '&lt;a href="file:///Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log1.txt"&gt;/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log1.txt&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20190113 18:59:58.208" starttime="20190113 18:59:58.207"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//adb_log2.txt</arg>
</arguments>
<msg timestamp="20190113 18:59:58.209" html="yes" level="INFO">File '&lt;a href="file:///Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log2.txt"&gt;/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log2.txt&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20190113 18:59:58.209" starttime="20190113 18:59:58.208"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//adb_log3.txt</arg>
</arguments>
<msg timestamp="20190113 18:59:58.209" html="yes" level="INFO">File '&lt;a href="file:///Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log3.txt"&gt;/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log3.txt&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20190113 18:59:58.209" starttime="20190113 18:59:58.209"></status>
</kw>
<status status="PASS" endtime="20190113 18:59:58.209" starttime="20190113 18:59:58.207"></status>
</kw>
<status status="PASS" endtime="20190113 18:59:58.210" starttime="20190113 18:59:58.207"></status>
</kw>
<kw type="teardown" name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Close All Apps</arg>
</arguments>
<kw name="Close All Apps">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Close All Applications</arg>
</arguments>
<kw name="Close All Applications" library="AppiumLibrary">
<doc>Closes all open applications.</doc>
<status status="PASS" endtime="20190113 19:05:55.471" starttime="20190113 19:05:54.165"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:55.471" starttime="20190113 19:05:54.165"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear Old Log Files</arg>
</arguments>
<kw name="Clear Old Log Files">
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//adb_log1.txt</arg>
</arguments>
<msg timestamp="20190113 19:05:55.473" html="yes" level="INFO">File '&lt;a href="file:///Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log1.txt"&gt;/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log1.txt&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20190113 19:05:55.473" starttime="20190113 19:05:55.472"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//adb_log2.txt</arg>
</arguments>
<msg timestamp="20190113 19:05:55.473" html="yes" level="INFO">File '&lt;a href="file:///Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log2.txt"&gt;/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log2.txt&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20190113 19:05:55.473" starttime="20190113 19:05:55.473"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//adb_log3.txt</arg>
</arguments>
<msg timestamp="20190113 19:05:55.474" html="yes" level="INFO">File '&lt;a href="file:///Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log3.txt"&gt;/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Tests/Part-Two--RFW-Strategies-For-Taking-Your-Test-Process-Further/adb_log3.txt&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20190113 19:05:55.474" starttime="20190113 19:05:55.474"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:55.474" starttime="20190113 19:05:55.471"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:55.474" starttime="20190113 19:05:55.471"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:55.474" starttime="20190113 19:05:54.165"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:55.474" starttime="20190113 19:05:54.164"></status>
</kw>
<test id="s1-s2-t1" name="SESSION-BASED TEST SETUP - ANDROID DEVICE : Set up this testing session and collect some information from the tester.">
<kw name="Setup Session Based Test And Gather Information">
<kw name="Go To Website On Android Device">
<kw name="Open Application" library="AppiumLibrary">
<doc>Opens a new application to given Appium server.</doc>
<arguments>
<arg>${REMOTE_URL}</arg>
<arg>platformName=${PLATFORM_NAME}</arg>
<arg>platformVersion=${PLATFORM_VERSION}</arg>
<arg>deviceName=${DEVICE_NAME}</arg>
<arg>browserName=Chrome</arg>
<arg>newCommandTimeout=600</arg>
</arguments>
<status status="PASS" endtime="20190113 19:00:07.443" starttime="20190113 18:59:58.211"></status>
</kw>
<kw name="Go To Url" library="AppiumLibrary">
<doc>Opens URL in default web browser.</doc>
<arguments>
<arg>https://www.intersection.com</arg>
</arguments>
<status status="PASS" endtime="20190113 19:00:13.579" starttime="20190113 19:00:07.443"></status>
</kw>
<kw name="Page Should Contain Text" library="AppiumLibrary">
<doc>Verifies that current page contains `text`.</doc>
<arguments>
<arg>Intersection</arg>
</arguments>
<msg timestamp="20190113 19:00:13.686" level="INFO">Current page contains text 'Intersection'.</msg>
<status status="PASS" endtime="20190113 19:00:13.687" starttime="20190113 19:00:13.579"></status>
</kw>
<kw name="Click Element" library="AppiumLibrary">
<doc>Click element identified by `locator`.</doc>
<arguments>
<arg>xpath=.//h6[contains(., 'Newsletter')]</arg>
</arguments>
<msg timestamp="20190113 19:00:13.687" level="INFO">Clicking element 'xpath=.//h6[contains(., 'Newsletter')]'.</msg>
<status status="PASS" endtime="20190113 19:00:14.032" starttime="20190113 19:00:13.687"></status>
</kw>
<kw name="Capture Page Screenshot" library="AppiumLibrary">
<doc>Takes a screenshot of the current page and embeds it into the log.</doc>
<msg timestamp="20190113 19:00:14.669" html="yes" level="INFO">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="appium-screenshot-1.png"&gt;&lt;img src="appium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 19:00:14.669" starttime="20190113 19:00:14.033"></status>
</kw>
<status status="PASS" endtime="20190113 19:00:14.670" starttime="20190113 18:59:58.211"></status>
</kw>
<kw name="Pause Execution" library="Dialogs">
<doc>Pauses test execution until user clicks ``Ok`` button.</doc>
<arguments>
<arg>SESSION-BASED TEST SETUP - ANDROID DEVICE :\n\n\n\n This is session number ${SESSION_NUMBER}. ${TESTER_NAME}, please use this time to set up your Session-based Test for GitHub PR number ${PULL_REQUEST_NUMBER}, for Jira Task Number ${JIRA_TASK_NUMBER}. Also please be aware of any time restrictions for this session.\n\n\n\n For example, maybe you could git clone the repo of the system-under-test. \n\n After cloning the repo, here are some interesting approaches that could possibly assist you... http://google-engtools.blogspot.com/2011/12/bug-prediction-at-google.html \n\n There is also a machine learning bug prediction tool called gitrisky... https://github.com/hinnefe2/gitrisky\n\n ^ Bug hotspot detection and prediction are only suggestions, and you should not limit yourself. Read the following "A Context-Driven Approach to Automation in Testing" article for more information... http://www.satisfice.com/articles/cdt-automation.pdf \n\n\n\n When you are ready to continue press OK. \n\n There will be additional dialog boxes with required fields that will ask for more information.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:00:18.701" starttime="20190113 19:00:14.670"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>SESSION CHARTER - ANDROID DEVICE :\n\n\n\n Please provide a detailed but brief description of the mission statement for this test. \n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${SESSION_CHARTER}</var>
</assign>
<msg timestamp="20190113 19:00:54.638" level="INFO">${SESSION_CHARTER} = Test the space reservation form</msg>
<status status="PASS" endtime="20190113 19:00:54.638" starttime="20190113 19:00:18.701"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>FUNCTIONAL AREAS COVERED - ANDROID DEVICE :\n\n\n\n Please provide a specific list of the areas that will be covered in this testing session.\n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${FUNCTIONAL_AREAS_COVERED}</var>
</assign>
<msg timestamp="20190113 19:01:04.555" level="INFO">${FUNCTIONAL_AREAS_COVERED} = Space Reservation</msg>
<status status="PASS" endtime="20190113 19:01:04.555" starttime="20190113 19:00:54.639"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>TASK BREAKDOWN - ANDROID DEVICE :\n\n\n\n Please follow the given example to provide metrics and information about...\n\n DURATION\n\n TEST DESIGN AND EXECUTION\n\n BUG INVESTIGATION AND REPORTING\n\n SESSION SETUP\n\n CHARTER VS. OPPORTUNITY\n\n DATA FILES\n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field, using the following example... DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 100, BUG INVESTIGATION AND REPORTING -&gt; 0, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</arg>
</arguments>
<assign>
<var>${TASK_BREAKDOWN}</var>
</assign>
<msg timestamp="20190113 19:01:19.540" level="INFO">${TASK_BREAKDOWN} = DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 80, BUG INVESTIGATION AND REPORTING -&gt; 20, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 19:01:19.540" starttime="20190113 19:01:04.556"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.541" level="INFO">${SESSION_CHARTER} = Test the space reservation form</msg>
<status status="PASS" endtime="20190113 19:01:19.541" starttime="20190113 19:01:19.541"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.542" level="INFO">${FUNCTIONAL_AREAS_COVERED} = Space Reservation</msg>
<status status="PASS" endtime="20190113 19:01:19.542" starttime="20190113 19:01:19.541"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.542" level="INFO">${TASK_BREAKDOWN} = DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 80, BUG INVESTIGATION AND REPORTING -&gt; 20, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 19:01:19.543" starttime="20190113 19:01:19.542"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.543" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20190113 19:01:19.543" starttime="20190113 19:01:19.543"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.544" level="INFO">Length is 17</msg>
<status status="PASS" endtime="20190113 19:01:19.544" starttime="20190113 19:01:19.543"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.544" level="INFO">Length is 184</msg>
<status status="PASS" endtime="20190113 19:01:19.544" starttime="20190113 19:01:19.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.545" level="INFO">Test the space reservation form</msg>
<status status="PASS" endtime="20190113 19:01:19.545" starttime="20190113 19:01:19.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.545" level="INFO">Space Reservation</msg>
<status status="PASS" endtime="20190113 19:01:19.545" starttime="20190113 19:01:19.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 19:01:19.546" level="INFO">DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 80, BUG INVESTIGATION AND REPORTING -&gt; 20, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 19:01:19.546" starttime="20190113 19:01:19.545"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.546" starttime="20190113 19:01:19.546"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.546" starttime="20190113 19:01:19.546"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.547" starttime="20190113 19:01:19.547"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>SESSION CHARTER...</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.547" starttime="20190113 19:01:19.547"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.548" starttime="20190113 19:01:19.547"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.548" starttime="20190113 19:01:19.548"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.548" starttime="20190113 19:01:19.548"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.549" starttime="20190113 19:01:19.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FUNCTIONAL AREAS COVERED...</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.549" starttime="20190113 19:01:19.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.550" starttime="20190113 19:01:19.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.550" starttime="20190113 19:01:19.550"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.550" starttime="20190113 19:01:19.550"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.551" starttime="20190113 19:01:19.550"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TASK BREAKDOWN...</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.551" starttime="20190113 19:01:19.551"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.551" starttime="20190113 19:01:19.551"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.552" starttime="20190113 19:01:19.551"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.552" starttime="20190113 19:01:19.552"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.552" starttime="20190113 19:01:19.552"></status>
</kw>
<status status="PASS" endtime="20190113 19:01:19.552" starttime="20190113 18:59:58.210"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Capture Test Failure</arg>
</arguments>
<status status="PASS" endtime="20190113 19:01:19.553" starttime="20190113 19:01:19.553"></status>
</kw>
<status status="PASS" endtime="20190113 19:01:19.553" starttime="20190113 19:01:19.553"></status>
</kw>
<status status="PASS" endtime="20190113 19:01:19.553" critical="yes" starttime="20190113 18:59:58.210"></status>
</test>
<test id="s1-s2-t2" name="SESSION-BASED TEST NOTES - ANDROID DEVICE : Perform a time boxed deep investigation of the given GitHub PR and check it against the Jira Task. From an Android device.">
<kw name="Perform Session Based Test And Gather Notes">
<arguments>
<arg>${SESSION_CHARTER}</arg>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<kw name="Gather Detailed Session Notes">
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>DETAILED TEST SESSION NOTES - GITHUB PR NUMBER ${PULL_REQUEST_NUMBER} - JIRA TASK NUMBER ${JIRA_TASK_NUMBER} - ANDROID DEVICE :\n\n\n\n Please describe everything you did while performing the test and anything you noticed while you were testing.\n\n\n\nAs a reminder, this is the SESSION CHARTER... ${SESSION_CHARTER}\n\n As a reminder, these are the FUNCTIONAL_AREAS_COVERED... ${FUNCTIONAL_AREAS_COVERED}\n\n As a reminder, these are the TASK_BREAKDOWN... ${TASK_BREAKDOWN}\n\n\n\n Follow the example, then press OK.\n\n\n\n</arg>
<arg>Please fill out this required field, using the following example... I tested _ and _ I noticed _ while I was testing &lt;enter the develper's name here&gt; helped me.</arg>
</arguments>
<assign>
<var>${DETAILED_SESSION_NOTES}</var>
</assign>
<msg timestamp="20190113 19:01:30.593" level="INFO">${DETAILED_SESSION_NOTES} = No new issues were found.</msg>
<status status="PASS" endtime="20190113 19:01:30.593" starttime="20190113 19:01:19.560"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 19:01:30.593" level="INFO">Length is 25</msg>
<status status="PASS" endtime="20190113 19:01:30.593" starttime="20190113 19:01:30.593"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 19:01:30.594" level="INFO">${DETAILED_SESSION_NOTES} = No new issues were found.</msg>
<status status="PASS" endtime="20190113 19:01:30.594" starttime="20190113 19:01:30.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 19:01:30.595" level="INFO">No new issues were found.</msg>
<status status="PASS" endtime="20190113 19:01:30.595" starttime="20190113 19:01:30.594"></status>
</kw>
<status status="PASS" endtime="20190113 19:01:30.595" starttime="20190113 19:01:19.560"></status>
</kw>
<kw name="Execute Manual Step" library="Dialogs">
<doc>Pauses test execution until user sets the keyword status.</doc>
<arguments>
<arg>TEST RESULT FOR GITHUB PR NUMBER ${PULL_REQUEST_NUMBER} - JIRA TASK NUMBER ${JIRA_TASK_NUMBER} - ANDROID DEVICE :\n\n\n\n Please make sure you read and understand all of the information in the GitHub PR and the Jira Task before continuing. If needed, pair with the developer who worked on it to make sure you understand what was done. \n\n\n\n When you are ready to move on, please press PASS or FAIL and be prepared to enter notes into the Robot Framework Dialog Box.\n\n</arg>
<arg>Please provide precise details about all of the issues you found. If necessary, you should take additional screenshots and upload them somewhere accessible (S3, Google Drive, etc.)...</arg>
</arguments>
<status status="PASS" endtime="20190113 19:05:54.160" starttime="20190113 19:01:30.595"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:54.161" starttime="20190113 19:01:19.559"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Capture Test Failure</arg>
</arguments>
<status status="PASS" endtime="20190113 19:05:54.162" starttime="20190113 19:05:54.162"></status>
</kw>
<status status="PASS" endtime="20190113 19:05:54.163" starttime="20190113 19:05:54.161"></status>
</kw>
<doc>Additional screenshots can be found in... s3://an-s3-bucket-with-more-screenshots-of-your-testing-session/ or maybe https://drive.google.com/drive/folders/google-drive-with-more-screenshots-of-your-testing-session
The GitHub PR that was tested is... https://github.com/your_github/repo/pull/3456
The Jira Task that was tested is... https://your-organization.atlassian.net/browse/6798</doc>
<tags>
<tag>Hybrid_Manual_Automated_Android_SBTM_Test</tag>
</tags>
<status status="PASS" endtime="20190113 19:05:54.163" critical="yes" starttime="20190113 19:01:19.556"></status>
</test>
<doc>This working test example and prototype is still in progress. It tries to get close to the approach that James and Jonathon Bach mention here... http://www.satisfice.com/sbtm/</doc>
<status status="PASS" endtime="20190113 19:05:55.474" starttime="20190113 18:59:57.931"></status>
</suite>
<suite source="/Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Workshop-Examples/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Hyrid-Session-Based-Test-Example-For-Desktop.robot" id="s1-s3" name="Josh tested Jira Task Number 5678 in the QA environment -- GitHub Pull Rquest Number 54674 was deployed to that environment -- Session-Based Test number 1 for 01-13-2019 09:22 PM on Desktop -- ">
<test id="s1-s3-t1" name="SESSION-BASED TEST SETUP - DESKTOP (OR LAPTOP) : Set up this testing session and collect some information from the tester.">
<kw name="Setup Session Based Test And Gather Information">
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 21:22:32.254" html="yes" level="INFO">&lt;a href="screenshot_9.jpg"&gt;&lt;img src="screenshot_9.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 21:22:32.254" starttime="20190113 21:22:32.012"></status>
</kw>
<kw name="Pause Execution" library="Dialogs">
<doc>Pauses test execution until user clicks ``Ok`` button.</doc>
<arguments>
<arg>SESSION-BASED TEST SETUP - DESKTOP (OR LAPTOP) :\n\n\n\n This is session number ${SESSION_NUMBER}. ${TESTER_NAME}, please use this time to set up your Session-based Test for GitHub PR number ${PULL_REQUEST_NUMBER}, for Jira Task Number ${JIRA_TASK_NUMBER}. Also please be aware of any time restrictions for this session.\n\n\n\n For example, maybe you could git clone the repo of the system-under-test. \n\n After cloning the repo, here are some interesting approaches that could possibly assist you... http://google-engtools.blogspot.com/2011/12/bug-prediction-at-google.html \n\n There is also a machine learning bug prediction tool called gitrisky... https://github.com/hinnefe2/gitrisky\n\n ^ Bug hotspot detection and prediction are only suggestions, and you should not limit yourself. Read the following "A Context-Driven Approach to Automation in Testing" article for more information... http://www.satisfice.com/articles/cdt-automation.pdf \n\n\n\n When you are ready to continue press OK. \n\n There will be additional dialog boxes with required fields that will ask for more information.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:22:35.271" starttime="20190113 21:22:32.255"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>SESSION CHARTER - DESKTOP (OR LAPTOP) :\n\n\n\n Please provide a detailed but brief description of the mission statement for this test. \n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${SESSION_CHARTER}</var>
</assign>
<msg timestamp="20190113 21:23:58.149" level="INFO">${SESSION_CHARTER} = This test will cover the high risk areas of the tech platform.</msg>
<status status="PASS" endtime="20190113 21:23:58.149" starttime="20190113 21:22:35.272"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>FUNCTIONAL AREAS COVERED - DESKTOP (OR LAPTOP) :\n\n\n\n Please provide a specific list of the areas that will be covered in this testing session.\n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${FUNCTIONAL_AREAS_COVERED}</var>
</assign>
<msg timestamp="20190113 21:25:03.275" level="INFO">${FUNCTIONAL_AREAS_COVERED} = enterprise service bus, message queue, event store, data normalizers</msg>
<status status="PASS" endtime="20190113 21:25:03.275" starttime="20190113 21:23:58.150"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>TASK BREAKDOWN - DESKTOP (OR LAPTOP) :\n\n\n\n Please follow the given example to provide metrics and information about...\n\n DURATION\n\n TEST DESIGN AND EXECUTION\n\n BUG INVESTIGATION AND REPORTING\n\n SESSION SETUP\n\n CHARTER VS. OPPORTUNITY\n\n DATA FILES\n\n\n\n If you are not sure how to do this, specific information can be found here... http://www.satisfice.com/sbtm/</arg>
<arg>Please fill out this required field, using the following example... DURATION -&gt; short, TEST DESIGN AND EXECUTION -&gt; 100, BUG INVESTIGATION AND REPORTING -&gt; 0, SESSION SETUP -&gt; 0, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</arg>
</arguments>
<assign>
<var>${TASK_BREAKDOWN}</var>
</assign>
<msg timestamp="20190113 21:25:59.815" level="INFO">${TASK_BREAKDOWN} = DURATION -&gt; long, TEST DESIGN AND EXECUTION -&gt; 80, BUG INVESTIGATION AND REPORTING -&gt; 10, SESSION SETUP -&gt; 10, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 21:25:59.815" starttime="20190113 21:25:03.275"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.816" level="INFO">${SESSION_CHARTER} = This test will cover the high risk areas of the tech platform.</msg>
<status status="PASS" endtime="20190113 21:25:59.816" starttime="20190113 21:25:59.815"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.817" level="INFO">${FUNCTIONAL_AREAS_COVERED} = enterprise service bus, message queue, event store, data normalizers</msg>
<status status="PASS" endtime="20190113 21:25:59.817" starttime="20190113 21:25:59.816"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.817" level="INFO">${TASK_BREAKDOWN} = DURATION -&gt; long, TEST DESIGN AND EXECUTION -&gt; 80, BUG INVESTIGATION AND REPORTING -&gt; 10, SESSION SETUP -&gt; 10, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 21:25:59.817" starttime="20190113 21:25:59.817"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.818" level="INFO">Length is 62</msg>
<status status="PASS" endtime="20190113 21:25:59.818" starttime="20190113 21:25:59.818"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.819" level="INFO">Length is 68</msg>
<status status="PASS" endtime="20190113 21:25:59.819" starttime="20190113 21:25:59.818"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.819" level="INFO">Length is 184</msg>
<status status="PASS" endtime="20190113 21:25:59.819" starttime="20190113 21:25:59.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.820" level="INFO">This test will cover the high risk areas of the tech platform.</msg>
<status status="PASS" endtime="20190113 21:25:59.820" starttime="20190113 21:25:59.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.820" level="INFO">enterprise service bus, message queue, event store, data normalizers</msg>
<status status="PASS" endtime="20190113 21:25:59.820" starttime="20190113 21:25:59.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<msg timestamp="20190113 21:25:59.821" level="INFO">DURATION -&gt; long, TEST DESIGN AND EXECUTION -&gt; 80, BUG INVESTIGATION AND REPORTING -&gt; 10, SESSION SETUP -&gt; 10, CHARTER VS. OPPORTUNITY -&gt; 100/0, DATA FILES -&gt; staging-user-profiles.csv</msg>
<status status="PASS" endtime="20190113 21:25:59.821" starttime="20190113 21:25:59.821"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.822" starttime="20190113 21:25:59.821"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.822" starttime="20190113 21:25:59.822"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.823" starttime="20190113 21:25:59.822"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>SESSION CHARTER...</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.823" starttime="20190113 21:25:59.823"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${SESSION_CHARTER}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.824" starttime="20190113 21:25:59.823"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.824" starttime="20190113 21:25:59.824"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.825" starttime="20190113 21:25:59.824"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.825" starttime="20190113 21:25:59.825"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FUNCTIONAL AREAS COVERED...</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.826" starttime="20190113 21:25:59.825"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.831" starttime="20190113 21:25:59.826"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.831" starttime="20190113 21:25:59.831"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.832" starttime="20190113 21:25:59.832"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.832" starttime="20190113 21:25:59.832"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TASK BREAKDOWN...</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.833" starttime="20190113 21:25:59.833"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.833" starttime="20190113 21:25:59.833"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.834" starttime="20190113 21:25:59.834"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.834" starttime="20190113 21:25:59.834"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190113 21:25:59.835" starttime="20190113 21:25:59.835"></status>
</kw>
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 21:26:00.071" html="yes" level="INFO">&lt;a href="screenshot_10.jpg"&gt;&lt;img src="screenshot_10.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 21:26:00.071" starttime="20190113 21:25:59.835"></status>
</kw>
<status status="PASS" endtime="20190113 21:26:00.072" starttime="20190113 21:22:32.012"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Take Screenshot And Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190113 21:26:00.073" starttime="20190113 21:26:00.073"></status>
</kw>
<status status="PASS" endtime="20190113 21:26:00.073" starttime="20190113 21:26:00.072"></status>
</kw>
<status status="PASS" endtime="20190113 21:26:00.074" critical="yes" starttime="20190113 21:22:32.011"></status>
</test>
<test id="s1-s3-t2" name="SESSION-BASED TEST NOTES - DESKTOP (OR LAPTOP) : Perform a time boxed deep investigation of the given GitHub PR and check it against the Jira Task. From a desktop (or laptop).">
<kw name="Perform Session Based Test And Gather Notes">
<arguments>
<arg>${SESSION_CHARTER}</arg>
<arg>${FUNCTIONAL_AREAS_COVERED}</arg>
<arg>${TASK_BREAKDOWN}</arg>
</arguments>
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 21:26:00.256" html="yes" level="INFO">&lt;a href="screenshot_11.jpg"&gt;&lt;img src="screenshot_11.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 21:26:00.256" starttime="20190113 21:26:00.078"></status>
</kw>
<kw name="Gather Detailed Session Notes">
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>DETAILED TEST SESSION NOTES - GITHUB PR NUMBER ${PULL_REQUEST_NUMBER} - JIRA TASK NUMBER ${JIRA_TASK_NUMBER} - DESKTOP (OR LAPTOP) :\n\n\n\n Please describe everything you did while performing the test and anything you noticed while you were testing.\n\n\n\nAs a reminder, this is the SESSION CHARTER... ${SESSION_CHARTER}\n\n As a reminder, these are the FUNCTIONAL_AREAS_COVERED... ${FUNCTIONAL_AREAS_COVERED}\n\n As a reminder, these are the TASK_BREAKDOWN... ${TASK_BREAKDOWN}\n\n\n\n Follow the example, then press OK.\n\n\n\n</arg>
<arg>Please fill out this required field, using the following example... I tested _ and _ I noticed _ while I was testing &lt;enter the develper's name here&gt; helped me.</arg>
</arguments>
<assign>
<var>${DETAILED_SESSION_NOTES}</var>
</assign>
<msg timestamp="20190113 21:29:40.445" level="INFO">${DETAILED_SESSION_NOTES} = Tried sending valid data to the /rental endpoint through the enterprise service bus. It did not get normalized. The application logs showed a 500 Internal Server Error.</msg>
<status status="PASS" endtime="20190113 21:29:40.445" starttime="20190113 21:26:00.257"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 21:29:40.446" level="INFO">Length is 168</msg>
<status status="PASS" endtime="20190113 21:29:40.447" starttime="20190113 21:29:40.446"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 21:29:40.448" level="INFO">${DETAILED_SESSION_NOTES} = Tried sending valid data to the /rental endpoint through the enterprise service bus. It did not get normalized. The application logs showed a 500 Internal Server Error.</msg>
<status status="PASS" endtime="20190113 21:29:40.448" starttime="20190113 21:29:40.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${DETAILED_SESSION_NOTES}</arg>
</arguments>
<msg timestamp="20190113 21:29:40.448" level="INFO">Tried sending valid data to the /rental endpoint through the enterprise service bus. It did not get normalized. The application logs showed a 500 Internal Server Error.</msg>
<status status="PASS" endtime="20190113 21:29:40.448" starttime="20190113 21:29:40.448"></status>
</kw>
<status status="PASS" endtime="20190113 21:29:40.448" starttime="20190113 21:26:00.257"></status>
</kw>
<kw name="Execute Manual Step" library="Dialogs">
<doc>Pauses test execution until user sets the keyword status.</doc>
<arguments>
<arg>TEST RESULT FOR GITHUB PR NUMBER ${PULL_REQUEST_NUMBER} - JIRA TASK NUMBER ${JIRA_TASK_NUMBER} - DESKTOP (OR LAPTOP) :\n\n\n\n Please make sure you read and understand all of the information in the GitHub PR and the Jira Task before continuing. If needed, pair with the developer who worked on it to make sure you understand what was done. \n\n\n\n When you are ready to move on, please press PASS or FAIL and be prepared to enter notes into the Robot Framework Dialog Box.\n\n</arg>
<arg>Please provide precise details about all of the issues you found. If necessary, you should take additional screenshots and upload them somewhere accessible (S3, Google Drive, etc.)...</arg>
</arguments>
<msg timestamp="20190113 21:31:01.889" level="FAIL">Sending valid data to the enterprise service bus is displaying Internal Server Errors.</msg>
<status status="FAIL" endtime="20190113 21:31:01.889" starttime="20190113 21:29:40.449"></status>
</kw>
<status status="FAIL" endtime="20190113 21:31:01.889" starttime="20190113 21:26:00.077"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Take Screenshot And Notify Team</arg>
</arguments>
<kw name="Failure Detected Take Screenshot And Notify Team">
<kw name="Take Screenshot" library="Screenshot">
<doc>Takes a screenshot in JPEG format and embeds it into the log file.</doc>
<msg timestamp="20190113 21:31:02.126" html="yes" level="INFO">&lt;a href="screenshot_12.jpg"&gt;&lt;img src="screenshot_12.jpg" width="800px"&gt;&lt;/a&gt;</msg>
<status status="PASS" endtime="20190113 21:31:02.126" starttime="20190113 21:31:01.892"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>AMOUNT OF ISSUES FOUND:\n\n\n\n Please provide the exact number of issues found during this testing session.</arg>
<arg>Please enter a number in here.</arg>
</arguments>
<assign>
<var>${AMOUNT_OF_ISSUES}</var>
</assign>
<msg timestamp="20190113 21:31:04.639" level="INFO">${AMOUNT_OF_ISSUES} = 1</msg>
<status status="PASS" endtime="20190113 21:31:04.639" starttime="20190113 21:31:02.127"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${AMOUNT_OF_ISSUES}</arg>
</arguments>
<msg timestamp="20190113 21:31:04.640" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20190113 21:31:04.640" starttime="20190113 21:31:04.639"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${AMOUNT_OF_ISSUES}</arg>
</arguments>
<msg timestamp="20190113 21:31:04.640" level="INFO">${AMOUNT_OF_ISSUES} = 1</msg>
<status status="PASS" endtime="20190113 21:31:04.641" starttime="20190113 21:31:04.640"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>FAILED TEST RESULT NOTES FOR SLACK AND EMAIL NOTIFICATIONS:\n\n\n\n Please give a brief summary of the issues you found. This will be turned into Slack and email notifications.</arg>
<arg>Please fill out this required field.</arg>
</arguments>
<assign>
<var>${FAILED_TEST_RESULT_NOTES}</var>
</assign>
<msg timestamp="20190113 21:32:03.145" level="INFO">${FAILED_TEST_RESULT_NOTES} = Sending valid data to the enterprise service bus through the /rental endpoint is displaying Internal Server Errors</msg>
<status status="PASS" endtime="20190113 21:32:03.145" starttime="20190113 21:31:04.641"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${FAILED_TEST_RESULT_NOTES}</arg>
</arguments>
<msg timestamp="20190113 21:32:03.146" level="INFO">Length is 114</msg>
<status status="PASS" endtime="20190113 21:32:03.146" starttime="20190113 21:32:03.146"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FAILED_TEST_RESULT_NOTES}</arg>
</arguments>
<msg timestamp="20190113 21:32:03.146" level="INFO">${FAILED_TEST_RESULT_NOTES} = Sending valid data to the enterprise service bus through the /rental endpoint is displaying Internal Server Errors</msg>
<status status="PASS" endtime="20190113 21:32:03.146" starttime="20190113 21:32:03.146"></status>
</kw>
<kw name="Send Detailed Message Through Slack And Email For Session Based Test">
<arguments>
<arg>${PULL_REQUEST_NUMBER}</arg>
<arg>${JIRA_TASK_NUMBER}</arg>
<arg>${DETAILED_SESSION_NOTES}</arg>
<arg>${AMOUNT_OF_ISSUES}</arg>
<arg>${TESTER_NAME}</arg>
<arg>${FAILED_TEST_RESULT_NOTES}</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TESTER_NAME} found ${AMOUNT_OF_ISSUES} issue(s) during a testing session for GitHub PR number ${PULL_REQUEST_NUMBER}, for Jira Task Number ${JIRA_TASK_NUMBER} in the ${TEST_ENVIRONMENT} environment on a desktop (or laptop) computer. Here are the details..." | slacktee.sh -i :nerd_face: --plain-text --config ${EXECDIR}/Workshop-Examples/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190113 21:32:03.148" level="INFO">Starting process:
echo "Josh found 1 issue(s) during a testing session for GitHub PR number 54674, for Jira Task Number 5678 in the QA environment on a desktop (or laptop) computer. Here are the details..." | slacktee.sh -i :nerd_face: --plain-text --config /Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20190113 21:32:03.170" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190113 21:32:03.777" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190113 21:32:03.778" starttime="20190113 21:32:03.147"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "These are the testing session notes: ${DETAILED_SESSION_NOTES}" | slacktee.sh -i :nerd_face: --plain-text --config ${EXECDIR}/Workshop-Examples/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190113 21:32:03.780" level="INFO">Starting process:
echo "These are the testing session notes: Tried sending valid data to the /rental endpoint through the enterprise service bus. It did not get normalized. The application logs showed a 500 Internal Server Error." | slacktee.sh -i :nerd_face: --plain-text --config /Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20190113 21:32:03.802" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190113 21:32:05.216" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190113 21:32:05.217" starttime="20190113 21:32:03.779"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "This is a detailed description of the issue(s): ${FAILED_TEST_RESULT_NOTES}" | slacktee.sh -i :nerd_face: --plain-text --config ${EXECDIR}/Workshop-Examples/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190113 21:32:05.219" level="INFO">Starting process:
echo "This is a detailed description of the issue(s): Sending valid data to the enterprise service bus through the /rental endpoint is displaying Internal Server Errors" | slacktee.sh -i :nerd_face: --plain-text --config /Users/joshuagorospe/Yardarm/Robot-Framework-Lone-Tester-Strategies-RoboCon-2019/Workshop-Examples/Shared-Resources/.slacktee</msg>
<msg timestamp="20190113 21:32:05.238" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190113 21:32:06.550" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190113 21:32:06.551" starttime="20190113 21:32:05.218"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190113 21:32:06.552" starttime="20190113 21:32:06.552"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:06.552" starttime="20190113 21:32:03.147"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:06.552" starttime="20190113 21:31:01.892"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:06.553" starttime="20190113 21:31:01.891"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:06.553" starttime="20190113 21:31:01.890"></status>
</kw>
<doc>Additional screenshots can be found in... s3://an-s3-bucket-with-more-screenshots-of-your-testing-session/ or maybe https://drive.google.com/drive/folders/google-drive-with-more-screenshots-of-your-testing-session
The GitHub PR that was tested is... https://github.com/your_github/repo/pull/54674
The Jira Task that was tested is... https://your-organization.atlassian.net/browse/5678</doc>
<tags>
<tag>Hybrid_Manual_Automated_Desktop_SBTM_Test</tag>
</tags>
<status status="FAIL" endtime="20190113 21:32:06.553" critical="yes" starttime="20190113 21:26:00.076">Sending valid data to the enterprise service bus is displaying Internal Server Errors.</status>
</test>
<doc>This working test example and prototype is still in progress. It tries to get close to the approach that James and Jonathon Bach mention here... http://www.satisfice.com/sbtm/</doc>
<status status="FAIL" endtime="20190113 21:32:06.554" starttime="20190113 21:22:31.937"></status>
</suite>
<suite id="s1-s4" name="Robot Framework test run with cURL in parallel">
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Curl1.robot" id="s1-s4-s1" name="Docker-Example-Curl1">
<test id="s1-s4-s1-t1" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X POST -H 'Content-Type: application/json' http://${BASE_URL}/posts/</arg>
<arg>alias=curl_robot_file_one_post</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:59.866" level="INFO">Starting process:
curl -i -X POST -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/</msg>
<msg timestamp="20190115 16:46:59.871" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:00.276" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:00.277" starttime="20190115 16:46:59.866"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_post</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:00.278" level="INFO">${CURL_ROBOT_FILE_ONE_POST_RESPONSE} = HTTP/1.1 201 Created
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 15
Connection: keep-alive
Set-Cookie: __cfduid=d692366559b9a663e4aa36b09db2ef41e1...</msg>
<status status="PASS" endtime="20190115 16:47:00.278" starttime="20190115 16:47:00.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:00.279" level="INFO">HTTP/1.1 201 Created
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 15
Connection: keep-alive
Set-Cookie: __cfduid=d692366559b9a663e4aa36b09db2ef41e1547570819; expires=Wed, 15-Jan-20 16:46:59 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, X-HTTP-Method-Override, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Access-Control-Expose-Headers: Location
Location: http://jsonplaceholder.typicode.com/posts//101
X-Content-Type-Options: nosniff
Etag: W/"f-4jjw4Y8q22Yv1PV9m28FczJgjzk"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d25881022318-FRA

{
  "id": 101
}</msg>
<status status="PASS" endtime="20190115 16:47:00.279" starttime="20190115 16:47:00.278"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.280" starttime="20190115 16:47:00.279"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.281" starttime="20190115 16:47:00.280"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.282" starttime="20190115 16:47:00.281"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.283" starttime="20190115 16:47:00.283"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.284" starttime="20190115 16:47:00.284"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.287" starttime="20190115 16:47:00.285"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.288" starttime="20190115 16:47:00.287"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
<arg>201</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.288" starttime="20190115 16:47:00.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
<arg>"id": 101</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.289" starttime="20190115 16:47:00.288"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:00.289" critical="yes" starttime="20190115 16:46:59.864"></status>
</test>
<test id="s1-s4-s1-t2" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title":"Testing with Robot Framework."}'</arg>
<arg>alias=curl_robot_file_one_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:00.292" level="INFO">Starting process:
curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title":"Testing with Robot Framework."}'</msg>
<msg timestamp="20190115 16:47:00.296" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:00.909" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:00.909" starttime="20190115 16:47:00.292"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:00.910" level="INFO">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 247
Connection: keep-alive
Set-Cookie: __cfduid=d9b899968c2b30cb42b1f21afb3fd544b15475...</msg>
<status status="PASS" endtime="20190115 16:47:00.910" starttime="20190115 16:47:00.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:00.911" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 247
Connection: keep-alive
Set-Cookie: __cfduid=d9b899968c2b30cb42b1f21afb3fd544b1547570820; expires=Wed, 15-Jan-20 16:47:00 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"f7-HtPCF3aWvOOlcV/mfwVTkbUGiXM"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d25b2416232a-FRA

{
  "userId": 1,
  "id": 1,
  "title": "Testing with Robot Framework.",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
}</msg>
<status status="PASS" endtime="20190115 16:47:00.911" starttime="20190115 16:47:00.910"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.912" starttime="20190115 16:47:00.911"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.913" starttime="20190115 16:47:00.912"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.914" starttime="20190115 16:47:00.913"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.914" starttime="20190115 16:47:00.914"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.915" starttime="20190115 16:47:00.915"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.916" starttime="20190115 16:47:00.915"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.917" starttime="20190115 16:47:00.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.917" starttime="20190115 16:47:00.917"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>"title": "Testing with Robot Framework."</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.918" starttime="20190115 16:47:00.917"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:00.918" critical="yes" starttime="20190115 16:47:00.290"></status>
</test>
<test id="s1-s4-s1-t3" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -H 'Content-Type: application/json' http://${BASE_URL}/posts/1</arg>
<arg>alias=curl_robot_file_one_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:00.921" level="INFO">Starting process:
curl -i -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1</msg>
<msg timestamp="20190115 16:47:00.925" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:01.027" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:01.028" starttime="20190115 16:47:00.920"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:01.029" level="INFO">${CURL_ROBOT_FILE_ONE_GET_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 292
Connection: keep-alive
Set-Cookie: __cfduid=d6e6d0aa22badee3f134127f819c83a6515475...</msg>
<status status="PASS" endtime="20190115 16:47:01.029" starttime="20190115 16:47:01.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:01.030" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 292
Connection: keep-alive
Set-Cookie: __cfduid=d6e6d0aa22badee3f134127f819c83a651547570820; expires=Wed, 15-Jan-20 16:47:00 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: public, max-age=14400
Pragma: no-cache
Expires: Tue, 15 Jan 2019 20:47:00 GMT
X-Content-Type-Options: nosniff
Etag: W/"124-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU"
Via: 1.1 vegur
CF-Cache-Status: HIT
Accept-Ranges: bytes
Server: cloudflare
CF-RAY: 4999d25f13562768-FRA

{
  "userId": 1,
  "id": 1,
  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
}</msg>
<status status="PASS" endtime="20190115 16:47:01.030" starttime="20190115 16:47:01.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.031" starttime="20190115 16:47:01.030"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.032" starttime="20190115 16:47:01.032"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.033" starttime="20190115 16:47:01.033"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.034" starttime="20190115 16:47:01.034"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.035" starttime="20190115 16:47:01.035"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.036" starttime="20190115 16:47:01.036"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.037" starttime="20190115 16:47:01.037"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.038" starttime="20190115 16:47:01.037"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
<arg>"id": 1</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.039" starttime="20190115 16:47:01.038"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
<arg>Testing with Robot Framework</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.039" starttime="20190115 16:47:01.039"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:01.040" critical="yes" starttime="20190115 16:47:00.919"></status>
</test>
<test id="s1-s4-s1-t4" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X DELETE -H 'Content-Type: application/json' http://${BASE_URL}/posts/1</arg>
<arg>alias=curl_robot_file_one_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:01.043" level="INFO">Starting process:
curl -i -X DELETE -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1</msg>
<msg timestamp="20190115 16:47:01.047" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:01.560" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:01.561" starttime="20190115 16:47:01.043"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:01.562" level="INFO">${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:01 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=de9b8f9e69db63d67f9cf913ccebffa531547570...</msg>
<status status="PASS" endtime="20190115 16:47:01.562" starttime="20190115 16:47:01.561"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:01.562" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:01 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=de9b8f9e69db63d67f9cf913ccebffa531547570821; expires=Wed, 15-Jan-20 16:47:01 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d25fd4812336-FRA

{}</msg>
<status status="PASS" endtime="20190115 16:47:01.563" starttime="20190115 16:47:01.562"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.564" starttime="20190115 16:47:01.563"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.565" starttime="20190115 16:47:01.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.566" starttime="20190115 16:47:01.565"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.567" starttime="20190115 16:47:01.566"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.568" starttime="20190115 16:47:01.567"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.569" starttime="20190115 16:47:01.568"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.570" starttime="20190115 16:47:01.569"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.570" starttime="20190115 16:47:01.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
<arg>{}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.571" starttime="20190115 16:47:01.570"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
<arg>"id": 1</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.571" starttime="20190115 16:47:01.571"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:01.572" critical="yes" starttime="20190115 16:47:01.041"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Several of them are maybe, days, weeks or months past their delivery date.
You are brought in to quickly learn everything about the project and set up basic regression tests touching all of the high risk areas, running in the CI pipeline in less than 10 working
days (ideally they want it in probably 5 days or less). This might be a situation where people are relying on various types of tools to test things out and quickly explore system behavior,
maybe there are dozens of cURL one-liners being shared by the developers...</doc>
<status status="PASS" endtime="20190115 16:47:01.573" starttime="20190115 16:46:59.852"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Curl2.robot" id="s1-s4-s2" name="Docker-Example-Curl2">
<test id="s1-s4-s2-t1" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X PUT -H 'Content-Type: application/json' http://${BASE_URL}/posts/2</arg>
<arg>alias=curl_robot_file_two_put</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:59.837" level="INFO">Starting process:
curl -i -X PUT -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2</msg>
<msg timestamp="20190115 16:46:59.842" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:00.353" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:00.353" starttime="20190115 16:46:59.836"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_put</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:00.355" level="INFO">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 13
Connection: keep-alive
Set-Cookie: __cfduid=d474226dde389294e237afeb75ce12a9d154757...</msg>
<status status="PASS" endtime="20190115 16:47:00.355" starttime="20190115 16:47:00.354"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:00.356" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 13
Connection: keep-alive
Set-Cookie: __cfduid=d474226dde389294e237afeb75ce12a9d1547570819; expires=Wed, 15-Jan-20 16:46:59 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"d-GUEcOn+YmHSF2tizNHXIHPjfR5k"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d25851582744-FRA

{
  "id": 2
}</msg>
<status status="PASS" endtime="20190115 16:47:00.356" starttime="20190115 16:47:00.355"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.357" starttime="20190115 16:47:00.356"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.358" starttime="20190115 16:47:00.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.360" starttime="20190115 16:47:00.359"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.361" starttime="20190115 16:47:00.360"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.362" starttime="20190115 16:47:00.361"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.364" starttime="20190115 16:47:00.362"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.365" starttime="20190115 16:47:00.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>201</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.366" starttime="20190115 16:47:00.366"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>"id": 2</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.366" starttime="20190115 16:47:00.366"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:00.367" critical="yes" starttime="20190115 16:46:59.834"></status>
</test>
<test id="s1-s4-s2-t2" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/2 -d '{"body":"Testing with Robot Framework."}'</arg>
<arg>alias=curl_robot_file_two_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:00.370" level="INFO">Starting process:
curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2 -d '{"body":"Testing with Robot Framework."}'</msg>
<msg timestamp="20190115 16:47:00.374" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:00.882" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:00.883" starttime="20190115 16:47:00.369"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:00.884" level="INFO">${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 98
Connection: keep-alive
Set-Cookie: __cfduid=d39f944503a253fb7ecf7ad20922677be154757...</msg>
<status status="PASS" endtime="20190115 16:47:00.884" starttime="20190115 16:47:00.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:00.885" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 98
Connection: keep-alive
Set-Cookie: __cfduid=d39f944503a253fb7ecf7ad20922677be1547570820; expires=Wed, 15-Jan-20 16:47:00 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"62-UW4wpSJRP5nWBZfFItRF4lSEyiI"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d25ba65d2324-FRA

{
  "userId": 1,
  "id": 2,
  "title": "qui est esse",
  "body": "Testing with Robot Framework."
}</msg>
<status status="PASS" endtime="20190115 16:47:00.885" starttime="20190115 16:47:00.884"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.887" starttime="20190115 16:47:00.885"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.888" starttime="20190115 16:47:00.887"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.889" starttime="20190115 16:47:00.888"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.891" starttime="20190115 16:47:00.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.892" starttime="20190115 16:47:00.891"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.893" starttime="20190115 16:47:00.892"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.894" starttime="20190115 16:47:00.893"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.894" starttime="20190115 16:47:00.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
<arg>"body": "Testing with Robot Framework."</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:00.895" starttime="20190115 16:47:00.894"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:00.895" critical="yes" starttime="20190115 16:47:00.368"></status>
</test>
<test id="s1-s4-s2-t3" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -H 'Content-Type: application/json' http://${BASE_URL}/posts/2</arg>
<arg>alias=curl_robot_file_two_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:00.898" level="INFO">Starting process:
curl -i -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2</msg>
<msg timestamp="20190115 16:47:00.902" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:01.513" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:01.514" starttime="20190115 16:47:00.898"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:01.516" level="INFO">${CURL_ROBOT_FILE_TWO_GET_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:01 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 278
Connection: keep-alive
Set-Cookie: __cfduid=da12199d1fb6f00d2b298c7e106235c9115475...</msg>
<status status="PASS" endtime="20190115 16:47:01.516" starttime="20190115 16:47:01.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:01.516" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:01 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 278
Connection: keep-alive
Set-Cookie: __cfduid=da12199d1fb6f00d2b298c7e106235c911547570820; expires=Wed, 15-Jan-20 16:47:00 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: public, max-age=14400
Pragma: no-cache
Expires: Tue, 15 Jan 2019 20:47:01 GMT
X-Content-Type-Options: nosniff
Etag: W/"116-jnDuMpjju89+9j7e0BqkdFsVRjs"
Via: 1.1 vegur
CF-Cache-Status: REVALIDATED
Accept-Ranges: bytes
Server: cloudflare
CF-RAY: 4999d25ef44f2336-FRA

{
  "userId": 1,
  "id": 2,
  "title": "qui est esse",
  "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
}</msg>
<status status="PASS" endtime="20190115 16:47:01.517" starttime="20190115 16:47:01.516"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.518" starttime="20190115 16:47:01.517"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.520" starttime="20190115 16:47:01.518"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.521" starttime="20190115 16:47:01.520"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.522" starttime="20190115 16:47:01.521"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.523" starttime="20190115 16:47:01.522"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.524" starttime="20190115 16:47:01.523"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.525" starttime="20190115 16:47:01.524"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.526" starttime="20190115 16:47:01.526"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
<arg>"id": 2</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.526" starttime="20190115 16:47:01.526"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
<arg>Testing with Robot Framework</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.527" starttime="20190115 16:47:01.527"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:01.528" critical="yes" starttime="20190115 16:47:00.896"></status>
</test>
<test id="s1-s4-s2-t4" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X DELETE -H 'Content-Type: application/json' http://${BASE_URL}/posts/2</arg>
<arg>alias=curl_robot_file_two_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:01.531" level="INFO">Starting process:
curl -i -X DELETE -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2</msg>
<msg timestamp="20190115 16:47:01.535" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:01.840" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:01.840" starttime="20190115 16:47:01.531"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:01.842" level="INFO">${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:01 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=d9d99f0a9c49a7cf374b7d331054e7def1547570...</msg>
<status status="PASS" endtime="20190115 16:47:01.842" starttime="20190115 16:47:01.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:01.842" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:47:01 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=d9d99f0a9c49a7cf374b7d331054e7def1547570821; expires=Wed, 15-Jan-20 16:47:01 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d262e0e02324-FRA

{}</msg>
<status status="PASS" endtime="20190115 16:47:01.843" starttime="20190115 16:47:01.842"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.844" starttime="20190115 16:47:01.843"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.845" starttime="20190115 16:47:01.844"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.846" starttime="20190115 16:47:01.845"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.848" starttime="20190115 16:47:01.846"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.849" starttime="20190115 16:47:01.848"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.850" starttime="20190115 16:47:01.849"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.851" starttime="20190115 16:47:01.850"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.852" starttime="20190115 16:47:01.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
<arg>{}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.852" starttime="20190115 16:47:01.852"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
<arg>"id": 2</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:01.853" starttime="20190115 16:47:01.852"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:01.853" critical="yes" starttime="20190115 16:47:01.529"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Several of them are maybe, days, weeks or months past their delivery date.
You are brought in to quickly learn everything about the project and set up basic regression tests touching all of the high risk areas, running in the CI pipeline in less than 10 working
days (ideally they want it in probably 5 days or less). This might be a situation where people are relying on various types of tools to test things out and quickly explore system behavior,
maybe there are dozens of cURL one-liners being shared by the developers...</doc>
<status status="PASS" endtime="20190115 16:47:01.855" starttime="20190115 16:46:59.823"></status>
</suite>
<status status="PASS" endtime="20190115 16:47:01.861" starttime="20190115 16:46:59.792"></status>
</suite>
<suite id="s1-s5" name="Robot Framework test run with cURL in serial">
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Curl1.robot" id="s1-s5-s1" name="Docker-Example-Curl1">
<test id="s1-s5-s1-t1" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X POST -H 'Content-Type: application/json' http://${BASE_URL}/posts/</arg>
<arg>alias=curl_robot_file_one_post</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:55.376" level="INFO">Starting process:
curl -i -X POST -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/</msg>
<msg timestamp="20190115 16:46:55.380" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:55.891" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:55.892" starttime="20190115 16:46:55.374"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_post</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:55.894" level="INFO">${CURL_ROBOT_FILE_ONE_POST_RESPONSE} = HTTP/1.1 201 Created
Date: Tue, 15 Jan 2019 16:46:55 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 15
Connection: keep-alive
Set-Cookie: __cfduid=d1debf95549160c9f1e0b49c8a910773a1...</msg>
<status status="PASS" endtime="20190115 16:46:55.894" starttime="20190115 16:46:55.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:55.895" level="INFO">HTTP/1.1 201 Created
Date: Tue, 15 Jan 2019 16:46:55 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 15
Connection: keep-alive
Set-Cookie: __cfduid=d1debf95549160c9f1e0b49c8a910773a1547570815; expires=Wed, 15-Jan-20 16:46:55 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, X-HTTP-Method-Override, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Access-Control-Expose-Headers: Location
Location: http://jsonplaceholder.typicode.com/posts//101
X-Content-Type-Options: nosniff
Etag: W/"f-4jjw4Y8q22Yv1PV9m28FczJgjzk"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d23d10922756-FRA

{
  "id": 101
}</msg>
<status status="PASS" endtime="20190115 16:46:55.895" starttime="20190115 16:46:55.894"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.896" starttime="20190115 16:46:55.896"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.898" starttime="20190115 16:46:55.897"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.899" starttime="20190115 16:46:55.899"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.901" starttime="20190115 16:46:55.900"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.902" starttime="20190115 16:46:55.901"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.903" starttime="20190115 16:46:55.902"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.903" starttime="20190115 16:46:55.903"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
<arg>201</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.904" starttime="20190115 16:46:55.904"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
<arg>"id": 101</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:55.905" starttime="20190115 16:46:55.904"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:55.905" critical="yes" starttime="20190115 16:46:55.372"></status>
</test>
<test id="s1-s5-s1-t2" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title":"Testing with Robot Framework."}'</arg>
<arg>alias=curl_robot_file_one_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:55.907" level="INFO">Starting process:
curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title":"Testing with Robot Framework."}'</msg>
<msg timestamp="20190115 16:46:55.910" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:56.423" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:56.424" starttime="20190115 16:46:55.907"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:56.426" level="INFO">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:56 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 247
Connection: keep-alive
Set-Cookie: __cfduid=decfa8721e02924feb39896c288646de415475...</msg>
<status status="PASS" endtime="20190115 16:46:56.427" starttime="20190115 16:46:56.425"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:56.427" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:56 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 247
Connection: keep-alive
Set-Cookie: __cfduid=decfa8721e02924feb39896c288646de41547570815; expires=Wed, 15-Jan-20 16:46:55 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"f7-HtPCF3aWvOOlcV/mfwVTkbUGiXM"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d23f92572768-FRA

{
  "userId": 1,
  "id": 1,
  "title": "Testing with Robot Framework.",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
}</msg>
<status status="PASS" endtime="20190115 16:46:56.428" starttime="20190115 16:46:56.427"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.428" starttime="20190115 16:46:56.428"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.429" starttime="20190115 16:46:56.429"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.430" starttime="20190115 16:46:56.429"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.431" starttime="20190115 16:46:56.430"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.432" starttime="20190115 16:46:56.431"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.433" starttime="20190115 16:46:56.432"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.434" starttime="20190115 16:46:56.433"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.435" starttime="20190115 16:46:56.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>"title": "Testing with Robot Framework."</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.435" starttime="20190115 16:46:56.435"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:56.436" critical="yes" starttime="20190115 16:46:55.906"></status>
</test>
<test id="s1-s5-s1-t3" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -H 'Content-Type: application/json' http://${BASE_URL}/posts/1</arg>
<arg>alias=curl_robot_file_one_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:56.438" level="INFO">Starting process:
curl -i -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1</msg>
<msg timestamp="20190115 16:46:56.441" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:56.543" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:56.543" starttime="20190115 16:46:56.438"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:56.548" level="INFO">${CURL_ROBOT_FILE_ONE_GET_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:56 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 292
Connection: keep-alive
Set-Cookie: __cfduid=dde9120c9de26d7e326b49bee941aea3215475...</msg>
<status status="PASS" endtime="20190115 16:46:56.548" starttime="20190115 16:46:56.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:56.549" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:56 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 292
Connection: keep-alive
Set-Cookie: __cfduid=dde9120c9de26d7e326b49bee941aea321547570816; expires=Wed, 15-Jan-20 16:46:56 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: public, max-age=14400
Pragma: no-cache
Expires: Tue, 15 Jan 2019 20:46:56 GMT
X-Content-Type-Options: nosniff
Etag: W/"124-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU"
Via: 1.1 vegur
CF-Cache-Status: HIT
Accept-Ranges: bytes
Server: cloudflare
CF-RAY: 4999d242f426275c-FRA

{
  "userId": 1,
  "id": 1,
  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
}</msg>
<status status="PASS" endtime="20190115 16:46:56.549" starttime="20190115 16:46:56.548"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.550" starttime="20190115 16:46:56.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.551" starttime="20190115 16:46:56.551"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.553" starttime="20190115 16:46:56.552"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.554" starttime="20190115 16:46:56.553"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.555" starttime="20190115 16:46:56.554"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.555" starttime="20190115 16:46:56.555"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.556" starttime="20190115 16:46:56.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.557" starttime="20190115 16:46:56.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
<arg>"id": 1</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.557" starttime="20190115 16:46:56.557"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
<arg>Testing with Robot Framework</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.558" starttime="20190115 16:46:56.557"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:56.558" critical="yes" starttime="20190115 16:46:56.437"></status>
</test>
<test id="s1-s5-s1-t4" name="CURL EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X DELETE -H 'Content-Type: application/json' http://${BASE_URL}/posts/1</arg>
<arg>alias=curl_robot_file_one_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:56.562" level="INFO">Starting process:
curl -i -X DELETE -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1</msg>
<msg timestamp="20190115 16:46:56.565" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:56.971" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:56.972" starttime="20190115 16:46:56.561"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_one_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:56.974" level="INFO">${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:56 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=dc419bf33e611477c93e9e9bcbdcc57521547570...</msg>
<status status="PASS" endtime="20190115 16:46:56.974" starttime="20190115 16:46:56.972"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:56.975" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:56 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=dc419bf33e611477c93e9e9bcbdcc57521547570816; expires=Wed, 15-Jan-20 16:46:56 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d243b5a32744-FRA

{}</msg>
<status status="PASS" endtime="20190115 16:46:56.975" starttime="20190115 16:46:56.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.977" starttime="20190115 16:46:56.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.978" starttime="20190115 16:46:56.977"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.979" starttime="20190115 16:46:56.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.980" starttime="20190115 16:46:56.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.980" starttime="20190115 16:46:56.980"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.981" starttime="20190115 16:46:56.981"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.982" starttime="20190115 16:46:56.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.983" starttime="20190115 16:46:56.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
<arg>{}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.983" starttime="20190115 16:46:56.983"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
<arg>"id": 1</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:56.984" starttime="20190115 16:46:56.984"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:56.984" critical="yes" starttime="20190115 16:46:56.559"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Several of them are maybe, days, weeks or months past their delivery date.
You are brought in to quickly learn everything about the project and set up basic regression tests touching all of the high risk areas, running in the CI pipeline in less than 10 working
days (ideally they want it in probably 5 days or less). This might be a situation where people are relying on various types of tools to test things out and quickly explore system behavior,
maybe there are dozens of cURL one-liners being shared by the developers...</doc>
<status status="PASS" endtime="20190115 16:46:56.986" starttime="20190115 16:46:55.362"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Curl2.robot" id="s1-s5-s2" name="Docker-Example-Curl2">
<test id="s1-s5-s2-t1" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X PUT -H 'Content-Type: application/json' http://${BASE_URL}/posts/2</arg>
<arg>alias=curl_robot_file_two_put</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:56.995" level="INFO">Starting process:
curl -i -X PUT -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2</msg>
<msg timestamp="20190115 16:46:56.998" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:57.407" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:57.408" starttime="20190115 16:46:56.994"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_put</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:57.410" level="INFO">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:57 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 13
Connection: keep-alive
Set-Cookie: __cfduid=d7f3b5ae66d44d41a9afaee0b5eef45a0154757...</msg>
<status status="PASS" endtime="20190115 16:46:57.411" starttime="20190115 16:46:57.409"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:57.412" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:57 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 13
Connection: keep-alive
Set-Cookie: __cfduid=d7f3b5ae66d44d41a9afaee0b5eef45a01547570817; expires=Wed, 15-Jan-20 16:46:57 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"d-GUEcOn+YmHSF2tizNHXIHPjfR5k"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d24662382756-FRA

{
  "id": 2
}</msg>
<status status="PASS" endtime="20190115 16:46:57.412" starttime="20190115 16:46:57.411"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.413" starttime="20190115 16:46:57.412"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.414" starttime="20190115 16:46:57.413"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.415" starttime="20190115 16:46:57.414"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.416" starttime="20190115 16:46:57.416"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.418" starttime="20190115 16:46:57.417"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.419" starttime="20190115 16:46:57.418"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.420" starttime="20190115 16:46:57.419"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>201</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.421" starttime="20190115 16:46:57.420"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>"id": 2</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:57.421" starttime="20190115 16:46:57.421"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:57.422" critical="yes" starttime="20190115 16:46:56.993"></status>
</test>
<test id="s1-s5-s2-t2" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/2 -d '{"body":"Testing with Robot Framework."}'</arg>
<arg>alias=curl_robot_file_two_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:57.425" level="INFO">Starting process:
curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2 -d '{"body":"Testing with Robot Framework."}'</msg>
<msg timestamp="20190115 16:46:57.431" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:58.040" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:58.041" starttime="20190115 16:46:57.425"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:58.042" level="INFO">${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:57 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 98
Connection: keep-alive
Set-Cookie: __cfduid=d0773cd432d449935b17c622e4734af8f154757...</msg>
<status status="PASS" endtime="20190115 16:46:58.043" starttime="20190115 16:46:58.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:58.044" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:57 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 98
Connection: keep-alive
Set-Cookie: __cfduid=d0773cd432d449935b17c622e4734af8f1547570817; expires=Wed, 15-Jan-20 16:46:57 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"62-UW4wpSJRP5nWBZfFItRF4lSEyiI"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d249151f2768-FRA

{
  "userId": 1,
  "id": 2,
  "title": "qui est esse",
  "body": "Testing with Robot Framework."
}</msg>
<status status="PASS" endtime="20190115 16:46:58.044" starttime="20190115 16:46:58.043"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.045" starttime="20190115 16:46:58.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.046" starttime="20190115 16:46:58.045"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.046" starttime="20190115 16:46:58.046"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.047" starttime="20190115 16:46:58.046"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.048" starttime="20190115 16:46:58.047"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.049" starttime="20190115 16:46:58.048"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.049" starttime="20190115 16:46:58.049"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.050" starttime="20190115 16:46:58.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
<arg>"body": "Testing with Robot Framework."</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.051" starttime="20190115 16:46:58.050"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:58.051" critical="yes" starttime="20190115 16:46:57.423"></status>
</test>
<test id="s1-s5-s2-t3" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -H 'Content-Type: application/json' http://${BASE_URL}/posts/2</arg>
<arg>alias=curl_robot_file_two_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:58.053" level="INFO">Starting process:
curl -i -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2</msg>
<msg timestamp="20190115 16:46:58.057" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:58.542" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:58.543" starttime="20190115 16:46:58.053"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:58.545" level="INFO">${CURL_ROBOT_FILE_TWO_GET_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:58 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 278
Connection: keep-alive
Set-Cookie: __cfduid=d4c129cd801e4670d67a994c0aa3f73bb15475...</msg>
<status status="PASS" endtime="20190115 16:46:58.545" starttime="20190115 16:46:58.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:58.546" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:58 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 278
Connection: keep-alive
Set-Cookie: __cfduid=d4c129cd801e4670d67a994c0aa3f73bb1547570818; expires=Wed, 15-Jan-20 16:46:58 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: public, max-age=14400
Pragma: no-cache
Expires: Tue, 15 Jan 2019 20:46:58 GMT
X-Content-Type-Options: nosniff
Etag: W/"116-jnDuMpjju89+9j7e0BqkdFsVRjs"
Via: 1.1 vegur
CF-Cache-Status: REVALIDATED
Accept-Ranges: bytes
Server: cloudflare
CF-RAY: 4999d24d066f275c-FRA

{
  "userId": 1,
  "id": 2,
  "title": "qui est esse",
  "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
}</msg>
<status status="PASS" endtime="20190115 16:46:58.546" starttime="20190115 16:46:58.545"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.547" starttime="20190115 16:46:58.547"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.548" starttime="20190115 16:46:58.548"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.549" starttime="20190115 16:46:58.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.550" starttime="20190115 16:46:58.550"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.551" starttime="20190115 16:46:58.551"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.552" starttime="20190115 16:46:58.552"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.553" starttime="20190115 16:46:58.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.554" starttime="20190115 16:46:58.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
<arg>"id": 2</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.555" starttime="20190115 16:46:58.554"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
<arg>Testing with Robot Framework</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.556" starttime="20190115 16:46:58.555"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:58.556" critical="yes" starttime="20190115 16:46:58.052"></status>
</test>
<test id="s1-s5-s2-t4" name="CURL EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>curl -i -X DELETE -H 'Content-Type: application/json' http://${BASE_URL}/posts/2</arg>
<arg>alias=curl_robot_file_two_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:58.558" level="INFO">Starting process:
curl -i -X DELETE -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/2</msg>
<msg timestamp="20190115 16:46:58.562" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:58.968" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:58.969" starttime="20190115 16:46:58.558"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>curl_robot_file_two_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:58.971" level="INFO">${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE} = HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:58 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=de1b57f94d61dbaf111876465c16ae4af1547570...</msg>
<status status="PASS" endtime="20190115 16:46:58.971" starttime="20190115 16:46:58.969"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:58.972" level="INFO">HTTP/1.1 200 OK
Date: Tue, 15 Jan 2019 16:46:58 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 2
Connection: keep-alive
Set-Cookie: __cfduid=de1b57f94d61dbaf111876465c16ae4af1547570818; expires=Wed, 15-Jan-20 16:46:58 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
X-Content-Type-Options: nosniff
Etag: W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d25057312768-FRA

{}</msg>
<status status="PASS" endtime="20190115 16:46:58.973" starttime="20190115 16:46:58.971"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.974" starttime="20190115 16:46:58.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.975" starttime="20190115 16:46:58.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.976" starttime="20190115 16:46:58.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.976" starttime="20190115 16:46:58.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.977" starttime="20190115 16:46:58.977"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.978" starttime="20190115 16:46:58.977"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.979" starttime="20190115 16:46:58.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.979" starttime="20190115 16:46:58.979"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
<arg>{}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.980" starttime="20190115 16:46:58.980"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
<arg>"id": 2</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:58.981" starttime="20190115 16:46:58.980"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:58.981" critical="yes" starttime="20190115 16:46:58.557"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Several of them are maybe, days, weeks or months past their delivery date.
You are brought in to quickly learn everything about the project and set up basic regression tests touching all of the high risk areas, running in the CI pipeline in less than 10 working
days (ideally they want it in probably 5 days or less). This might be a situation where people are relying on various types of tools to test things out and quickly explore system behavior,
maybe there are dozens of cURL one-liners being shared by the developers...</doc>
<status status="PASS" endtime="20190115 16:46:58.983" starttime="20190115 16:46:56.988"></status>
</suite>
<status status="PASS" endtime="20190115 16:46:58.986" starttime="20190115 16:46:55.332"></status>
</suite>
<suite id="s1-s6" name="Robot Framework test run with cURL in parallel and generate random malformed test data using the Radamsa general-purpose fuzzer">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl1-Enhanced-Version.robot" id="s1-s6-s1" name="Docker-Example-Curl1-Enhanced-Version">
<kw type="teardown" name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:24.593" html="yes" level="INFO">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20190115 16:48:24.593" starttime="20190115 16:48:24.590"></status>
</kw>
<test id="s1-s6-s1-t1" name="CURL EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response.">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg timestamp="20190115 16:48:24.005" level="INFO">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg timestamp="20190115 16:48:24.015" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:24.116" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:24.116" starttime="20190115 16:48:24.005"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:24.117" starttime="20190115 16:48:24.004"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:24.120" level="INFO">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt'.</msg>
<status status="PASS" endtime="20190115 16:48:24.573" starttime="20190115 16:48:24.117"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:24.574" html="yes" level="INFO">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<msg timestamp="20190115 16:48:24.579" level="INFO">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=dc3ef413049ae65bca9...</msg>
<status status="PASS" endtime="20190115 16:48:24.580" starttime="20190115 16:48:24.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:48:24.580" level="INFO">HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=dc3ef413049ae65bca9751d3af6649b601547570904; expires=Wed, 15-Jan-20 16:48:24 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d46702332744-FRA

SyntaxError: Unexpected token ¯ in JSON at position 11
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status status="PASS" endtime="20190115 16:48:24.580" starttime="20190115 16:48:24.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.581" starttime="20190115 16:48:24.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.582" starttime="20190115 16:48:24.581"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.583" starttime="20190115 16:48:24.582"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.583" starttime="20190115 16:48:24.583"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.585" starttime="20190115 16:48:24.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.586" starttime="20190115 16:48:24.585"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.586" starttime="20190115 16:48:24.586"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.587" starttime="20190115 16:48:24.587"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:24.587" critical="yes" starttime="20190115 16:48:24.002"></status>
</test>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:24.593" starttime="20190115 16:48:23.889"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl2-Enhanced-Version.robot" id="s1-s6-s2" name="Docker-Example-Curl2-Enhanced-Version">
<kw type="teardown" name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:24.768" html="yes" level="INFO">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20190115 16:48:24.768" starttime="20190115 16:48:24.765"></status>
</kw>
<test id="s1-s6-s2-t1" name="CURL EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response.">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg timestamp="20190115 16:48:24.018" level="INFO">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg timestamp="20190115 16:48:24.023" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:24.124" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:24.124" starttime="20190115 16:48:24.017"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:24.124" starttime="20190115 16:48:24.016"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:24.128" level="INFO">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt'.</msg>
<status status="PASS" endtime="20190115 16:48:24.749" starttime="20190115 16:48:24.125"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:24.750" html="yes" level="INFO">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<msg timestamp="20190115 16:48:24.755" level="INFO">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d1b0e6bdaaf486af6cb...</msg>
<status status="PASS" endtime="20190115 16:48:24.755" starttime="20190115 16:48:24.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:48:24.756" level="INFO">HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d1b0e6bdaaf486af6cb8a2765763a5bbd1547570904; expires=Wed, 15-Jan-20 16:48:24 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d46716bd2738-FRA

SyntaxError: Unexpected token ¯ in JSON at position 10
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status status="PASS" endtime="20190115 16:48:24.756" starttime="20190115 16:48:24.755"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.756" starttime="20190115 16:48:24.756"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.757" starttime="20190115 16:48:24.757"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.758" starttime="20190115 16:48:24.757"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.759" starttime="20190115 16:48:24.758"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.760" starttime="20190115 16:48:24.759"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.761" starttime="20190115 16:48:24.760"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.762" starttime="20190115 16:48:24.761"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.762" starttime="20190115 16:48:24.762"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:24.762" critical="yes" starttime="20190115 16:48:24.014"></status>
</test>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:24.768" starttime="20190115 16:48:23.899"></status>
</suite>
<status status="PASS" endtime="20190115 16:48:24.770" starttime="20190115 16:48:23.856"></status>
</suite>
<suite id="s1-s7" name="Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl1-Enhanced-Version.robot" id="s1-s7-s1" name="Docker-Example-Curl1-Enhanced-Version">
<kw type="teardown" name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:22.235" html="yes" level="INFO">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20190115 16:48:22.235" starttime="20190115 16:48:22.232"></status>
</kw>
<test id="s1-s7-s1-t1" name="CURL EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response.">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg timestamp="20190115 16:48:21.609" level="INFO">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg timestamp="20190115 16:48:21.614" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:21.715" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:21.716" starttime="20190115 16:48:21.608"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:21.716" starttime="20190115 16:48:21.607"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:21.724" level="INFO">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt'.</msg>
<status status="PASS" endtime="20190115 16:48:22.214" starttime="20190115 16:48:21.718"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:22.217" html="yes" level="INFO">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<msg timestamp="20190115 16:48:22.222" level="INFO">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:22 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d50de3aa294a93dc6c6...</msg>
<status status="PASS" endtime="20190115 16:48:22.222" starttime="20190115 16:48:22.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:48:22.223" level="INFO">HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:22 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d50de3aa294a93dc6c621627200a95a601547570901; expires=Wed, 15-Jan-20 16:48:21 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d458071d2318-FRA

SyntaxError: Unexpected token � in JSON at position 11
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status status="PASS" endtime="20190115 16:48:22.223" starttime="20190115 16:48:22.223"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.224" starttime="20190115 16:48:22.223"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.225" starttime="20190115 16:48:22.224"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.225" starttime="20190115 16:48:22.225"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.226" starttime="20190115 16:48:22.226"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.227" starttime="20190115 16:48:22.227"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.228" starttime="20190115 16:48:22.228"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.229" starttime="20190115 16:48:22.229"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.230" starttime="20190115 16:48:22.229"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:22.230" critical="yes" starttime="20190115 16:48:21.605"></status>
</test>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:22.235" starttime="20190115 16:48:21.511"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl2-Enhanced-Version.robot" id="s1-s7-s2" name="Docker-Example-Curl2-Enhanced-Version">
<kw type="teardown" name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:23.006" html="yes" level="INFO">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20190115 16:48:23.006" starttime="20190115 16:48:23.003"></status>
</kw>
<test id="s1-s7-s2-t1" name="CURL EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response.">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg timestamp="20190115 16:48:22.290" level="INFO">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg timestamp="20190115 16:48:22.295" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:22.397" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:22.397" starttime="20190115 16:48:22.290"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:22.398" starttime="20190115 16:48:22.288"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg timestamp="20190115 16:48:22.404" level="INFO">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt'.</msg>
<status status="PASS" endtime="20190115 16:48:22.986" starttime="20190115 16:48:22.399"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:22.989" html="yes" level="INFO">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<msg timestamp="20190115 16:48:22.994" level="INFO">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:22 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d0f861cb341648efa6f...</msg>
<status status="PASS" endtime="20190115 16:48:22.994" starttime="20190115 16:48:22.987"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:48:22.995" level="INFO">HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:22 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d0f861cb341648efa6ff6405e5db055531547570902; expires=Wed, 15-Jan-20 16:48:22 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d45c31302768-FRA

SyntaxError: Unexpected token � in JSON at position 10
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status status="PASS" endtime="20190115 16:48:22.995" starttime="20190115 16:48:22.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.996" starttime="20190115 16:48:22.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.997" starttime="20190115 16:48:22.996"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.998" starttime="20190115 16:48:22.997"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.999" starttime="20190115 16:48:22.998"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:22.999" starttime="20190115 16:48:22.999"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:23.000" starttime="20190115 16:48:23.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:23.001" starttime="20190115 16:48:23.001"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:23.002" starttime="20190115 16:48:23.001"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:23.002" critical="yes" starttime="20190115 16:48:22.285"></status>
</test>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:23.006" starttime="20190115 16:48:22.239"></status>
</suite>
<status status="PASS" endtime="20190115 16:48:23.008" starttime="20190115 16:48:21.482"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Postman-Newman.robot" id="s1-s8" name="Robot Framework test run with a Postman Newman Collection running one Postman Folder at a time in serial">
<test id="s1-s8-t1" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_post</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:42.100" level="INFO">Starting process:
newman run /rfw//Tests//Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:46:42.104" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:44.336" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:44.336" starttime="20190115 16:46:42.099"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_post</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:44.338" level="INFO">${POSTMAN_POST_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 612ms]</msg>
<status status="PASS" endtime="20190115 16:46:44.338" starttime="20190115 16:46:44.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:44.339" level="INFO">newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 612ms]</msg>
<status status="PASS" endtime="20190115 16:46:44.339" starttime="20190115 16:46:44.339"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.340" starttime="20190115 16:46:44.339"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.341" starttime="20190115 16:46:44.340"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.342" starttime="20190115 16:46:44.341"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.342" starttime="20190115 16:46:44.342"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.343" starttime="20190115 16:46:44.343"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.344" starttime="20190115 16:46:44.343"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.344" starttime="20190115 16:46:44.344"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
<arg>201 Created</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:44.345" starttime="20190115 16:46:44.345"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:44.346" critical="yes" starttime="20190115 16:46:42.098"></status>
</test>
<test id="s1-s8-t2" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:44.349" level="INFO">Starting process:
newman run /rfw//Tests//Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:46:44.353" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:46.684" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:46.684" starttime="20190115 16:46:44.348"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:46.690" level="INFO">${POSTMAN_PATCH_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 654ms]</msg>
<status status="PASS" endtime="20190115 16:46:46.691" starttime="20190115 16:46:46.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:46.693" level="INFO">newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 654ms]</msg>
<status status="PASS" endtime="20190115 16:46:46.693" starttime="20190115 16:46:46.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.694" starttime="20190115 16:46:46.694"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.696" starttime="20190115 16:46:46.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.696" starttime="20190115 16:46:46.696"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.697" starttime="20190115 16:46:46.697"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.698" starttime="20190115 16:46:46.698"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.699" starttime="20190115 16:46:46.698"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.700" starttime="20190115 16:46:46.699"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:46.701" starttime="20190115 16:46:46.700"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:46.701" critical="yes" starttime="20190115 16:46:44.346"></status>
</test>
<test id="s1-s8-t3" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:46.704" level="INFO">Starting process:
newman run /rfw//Tests//Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:46:46.708" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:48.533" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:48.533" starttime="20190115 16:46:46.703"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:48.535" level="INFO">${POSTMAN_GET_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 236ms]</msg>
<status status="PASS" endtime="20190115 16:46:48.535" starttime="20190115 16:46:48.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:48.536" level="INFO">newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 236ms]</msg>
<status status="PASS" endtime="20190115 16:46:48.536" starttime="20190115 16:46:48.536"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.537" starttime="20190115 16:46:48.537"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.538" starttime="20190115 16:46:48.538"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.539" starttime="20190115 16:46:48.539"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.540" starttime="20190115 16:46:48.540"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.541" starttime="20190115 16:46:48.541"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.542" starttime="20190115 16:46:48.542"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.543" starttime="20190115 16:46:48.543"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:48.544" starttime="20190115 16:46:48.544"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:48.545" critical="yes" starttime="20190115 16:46:46.702"></status>
</test>
<test id="s1-s8-t4" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:46:48.548" level="INFO">Starting process:
newman run /rfw//Tests//Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:46:48.551" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:46:50.782" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:46:50.782" starttime="20190115 16:46:48.547"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:46:50.784" level="INFO">${POSTMAN_DELETE_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 562ms]</msg>
<status status="PASS" endtime="20190115 16:46:50.784" starttime="20190115 16:46:50.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:46:50.786" level="INFO">newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 562ms]</msg>
<status status="PASS" endtime="20190115 16:46:50.786" starttime="20190115 16:46:50.785"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.787" starttime="20190115 16:46:50.786"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.788" starttime="20190115 16:46:50.787"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.789" starttime="20190115 16:46:50.788"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.790" starttime="20190115 16:46:50.789"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.791" starttime="20190115 16:46:50.790"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.792" starttime="20190115 16:46:50.791"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.793" starttime="20190115 16:46:50.792"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:46:50.794" starttime="20190115 16:46:50.793"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:46:50.794" critical="yes" starttime="20190115 16:46:48.546"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Several of them are maybe, days, weeks or months past their delivery date.
You are brought in to quickly learn everything about the project and set up basic regression tests touching all of the high risk areas, running in the CI pipeline in less than 10 working
days (ideally they want it in probably 5 days or less). This might be a situation where people are relying on various types of tools to test things out and quickly explore system behavior,
maybe all of the developers like using Postman (with Newman) and are sharing a single Postman Collection that keeps growing bigger every day. This example is enhanced in Part Two...</doc>
<status status="PASS" endtime="20190115 16:46:50.796" starttime="20190115 16:46:42.049"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Postman-Newman-Enhanced-Version.robot" id="s1-s9" name="Robot Framework test run with a Postman Newman Collection running one Postman Folder at a time in serial random order">
<test id="s1-s9-t1" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:50.646" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:50.651" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:52.375" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:52.376" starttime="20190115 16:47:50.645"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:52.378" level="INFO">${POSTMAN_GET_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 210ms]</msg>
<status status="PASS" endtime="20190115 16:47:52.378" starttime="20190115 16:47:52.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:52.379" level="INFO">newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 210ms]</msg>
<status status="PASS" endtime="20190115 16:47:52.380" starttime="20190115 16:47:52.379"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.381" starttime="20190115 16:47:52.380"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.382" starttime="20190115 16:47:52.382"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.384" starttime="20190115 16:47:52.383"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.385" starttime="20190115 16:47:52.385"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.387" starttime="20190115 16:47:52.386"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.388" starttime="20190115 16:47:52.387"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.389" starttime="20190115 16:47:52.389"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.390" starttime="20190115 16:47:52.389"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.391" starttime="20190115 16:47:52.391"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:52.391" starttime="20190115 16:47:52.390"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:52.391" critical="yes" starttime="20190115 16:47:50.643">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s9-t2" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:48.174" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:48.178" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:50.517" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:50.518" starttime="20190115 16:47:48.174"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:50.520" level="INFO">${POSTMAN_PATCH_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]</msg>
<status status="PASS" endtime="20190115 16:47:50.520" starttime="20190115 16:47:50.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:50.522" level="INFO">newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]</msg>
<status status="PASS" endtime="20190115 16:47:50.522" starttime="20190115 16:47:50.521"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.523" starttime="20190115 16:47:50.522"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.524" starttime="20190115 16:47:50.524"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.526" starttime="20190115 16:47:50.525"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.527" starttime="20190115 16:47:50.527"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.528" starttime="20190115 16:47:50.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.529" starttime="20190115 16:47:50.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.530" starttime="20190115 16:47:50.530"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<msg timestamp="20190115 16:47:50.531" level="FAIL">'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]' contains '200 OK'</msg>
<status status="FAIL" endtime="20190115 16:47:50.531" starttime="20190115 16:47:50.530"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Postman-Newman-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:50.533" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Postman-Newman-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:47:50.537" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:50.638" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:50.639" starttime="20190115 16:47:50.533"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:47:50.640" starttime="20190115 16:47:50.639"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.640" starttime="20190115 16:47:50.533"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.640" starttime="20190115 16:47:50.532"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.641" starttime="20190115 16:47:50.532"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.641" starttime="20190115 16:47:50.532"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="FAIL" endtime="20190115 16:47:50.641" critical="yes" starttime="20190115 16:47:48.172">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH &lt;a href="https://jsonplaceholder.typicode.com/posts/1"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/a&gt; [200 OK, 960B, 702ms]' contains '200 OK'&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH &lt;a href="https://jsonplaceholder.typicode.com/posts/1"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/a&gt; [200 OK, 960B, 403ms]' contains '200 OK'</status>
</test>
<test id="s1-s9-t3" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:52.394" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:52.398" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:54.525" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:54.526" starttime="20190115 16:47:52.394"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:54.527" level="INFO">${POSTMAN_DELETE_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 522ms]</msg>
<status status="PASS" endtime="20190115 16:47:54.527" starttime="20190115 16:47:54.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:54.528" level="INFO">newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 522ms]</msg>
<status status="PASS" endtime="20190115 16:47:54.528" starttime="20190115 16:47:54.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.529" starttime="20190115 16:47:54.529"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.530" starttime="20190115 16:47:54.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.531" starttime="20190115 16:47:54.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.532" starttime="20190115 16:47:54.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.533" starttime="20190115 16:47:54.532"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.534" starttime="20190115 16:47:54.533"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.534" starttime="20190115 16:47:54.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.535" starttime="20190115 16:47:54.535"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.537" starttime="20190115 16:47:54.536"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:54.537" starttime="20190115 16:47:54.536"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:54.537" critical="yes" starttime="20190115 16:47:52.393">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s9-t4" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_post</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:46.019" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:46.023" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:48.155" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:48.155" starttime="20190115 16:47:46.019"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_post</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:48.157" level="INFO">${POSTMAN_POST_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 524ms]</msg>
<status status="PASS" endtime="20190115 16:47:48.157" starttime="20190115 16:47:48.157"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:48.159" level="INFO">newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 524ms]</msg>
<status status="PASS" endtime="20190115 16:47:48.159" starttime="20190115 16:47:48.158"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.160" starttime="20190115 16:47:48.159"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.161" starttime="20190115 16:47:48.161"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.162" starttime="20190115 16:47:48.162"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.164" starttime="20190115 16:47:48.163"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.165" starttime="20190115 16:47:48.164"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.166" starttime="20190115 16:47:48.165"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.167" starttime="20190115 16:47:48.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
<arg>201 Created</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.168" starttime="20190115 16:47:48.168"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.169" starttime="20190115 16:47:48.169"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:48.169" starttime="20190115 16:47:48.169"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:48.170" critical="yes" starttime="20190115 16:47:46.017">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<doc>Part Two of the Postman Newman example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize tests" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<metadata>
<item name="Randomized">Tests (seed 4823838131858723709)</item>
</metadata>
<status status="FAIL" elapsedtime="8514" endtime="N/A" starttime="N/A"></status>
</suite>
<suite id="s1-s10" name="Robot Framework test run with user-created Python Library in parallel">
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Python-Library1.robot" id="s1-s10-s1" name="Docker-Example-Python-Library1">
<test id="s1-s10-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:30.999" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:30.999" starttime="20190115 16:47:30.639"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.000" starttime="20190115 16:47:31.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.001" starttime="20190115 16:47:31.001"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.002" starttime="20190115 16:47:31.001"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.003" starttime="20190115 16:47:31.002"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.004" starttime="20190115 16:47:31.003"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.005" starttime="20190115 16:47:31.004"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.005" starttime="20190115 16:47:31.005"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.007" starttime="20190115 16:47:31.006"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.007" starttime="20190115 16:47:31.007"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.008" starttime="20190115 16:47:31.008"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.009" starttime="20190115 16:47:31.008"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:47:31.009" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.010" starttime="20190115 16:47:31.009"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.010" starttime="20190115 16:47:31.010"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:31.011" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:47:31.011" starttime="20190115 16:47:31.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:47:31.011" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.011" starttime="20190115 16:47:31.011"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.011" critical="yes" starttime="20190115 16:47:30.637"></status>
</test>
<test id="s1-s10-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:31.423" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.423" starttime="20190115 16:47:31.014"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.424" starttime="20190115 16:47:31.423"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.425" starttime="20190115 16:47:31.424"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.426" starttime="20190115 16:47:31.425"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.427" starttime="20190115 16:47:31.426"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.428" starttime="20190115 16:47:31.427"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.429" starttime="20190115 16:47:31.428"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.429" starttime="20190115 16:47:31.429"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.430" starttime="20190115 16:47:31.429"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.431" starttime="20190115 16:47:31.430"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.432" starttime="20190115 16:47:31.431"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.433" starttime="20190115 16:47:31.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.433" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.433" starttime="20190115 16:47:31.433"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.434" starttime="20190115 16:47:31.433"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.434" critical="yes" starttime="20190115 16:47:31.012"></status>
</test>
<test id="s1-s10-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:31.498" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.498" starttime="20190115 16:47:31.436"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.500" starttime="20190115 16:47:31.499"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.501" starttime="20190115 16:47:31.500"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.502" starttime="20190115 16:47:31.501"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.503" starttime="20190115 16:47:31.502"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.504" starttime="20190115 16:47:31.503"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.505" starttime="20190115 16:47:31.504"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.505" starttime="20190115 16:47:31.505"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.506" starttime="20190115 16:47:31.505"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.507" starttime="20190115 16:47:31.507"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.508" starttime="20190115 16:47:31.507"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.508" starttime="20190115 16:47:31.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.509" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.509" starttime="20190115 16:47:31.509"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.510" starttime="20190115 16:47:31.509"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.510" starttime="20190115 16:47:31.510"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.511" critical="yes" starttime="20190115 16:47:31.435"></status>
</test>
<test id="s1-s10-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:31.953" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.953" starttime="20190115 16:47:31.513"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.955" starttime="20190115 16:47:31.954"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.956" starttime="20190115 16:47:31.955"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.957" starttime="20190115 16:47:31.956"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.958" starttime="20190115 16:47:31.957"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.959" starttime="20190115 16:47:31.958"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.960" starttime="20190115 16:47:31.959"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.960" starttime="20190115 16:47:31.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.961" starttime="20190115 16:47:31.961"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:31.962" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:31.962" starttime="20190115 16:47:31.961"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.962" critical="yes" starttime="20190115 16:47:31.511"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to provide you with some help building out the Robot Framework regression tests. The following assumes that the team member helping you is most likely a developer.
The developer helping you is comfortable with contributing to a test that uses a few keywords from the standard Robot Framework BuiltIn Library, and the rest is
handled by a user-created library. In this case the library is written in Python...</doc>
<status status="PASS" endtime="20190115 16:47:31.964" starttime="20190115 16:47:30.542"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Python-Library2.robot" id="s1-s10-s2" name="Docker-Example-Python-Library2">
<test id="s1-s10-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:30.991" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:30.991" starttime="20190115 16:47:30.639"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.992" starttime="20190115 16:47:30.991"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.993" starttime="20190115 16:47:30.992"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.994" starttime="20190115 16:47:30.994"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.995" starttime="20190115 16:47:30.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.996" starttime="20190115 16:47:30.996"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.997" starttime="20190115 16:47:30.997"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.998" starttime="20190115 16:47:30.998"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:30.999" starttime="20190115 16:47:30.998"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.000" starttime="20190115 16:47:31.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.001" starttime="20190115 16:47:31.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.002" starttime="20190115 16:47:31.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.003" starttime="20190115 16:47:31.002"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.003" starttime="20190115 16:47:31.003"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:31.004" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:47:31.004" starttime="20190115 16:47:31.004"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:47:31.005" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.005" starttime="20190115 16:47:31.004"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.005" critical="yes" starttime="20190115 16:47:30.637"></status>
</test>
<test id="s1-s10-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:31.401" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.401" starttime="20190115 16:47:31.008"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.402" starttime="20190115 16:47:31.401"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.403" starttime="20190115 16:47:31.402"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.404" starttime="20190115 16:47:31.403"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.405" starttime="20190115 16:47:31.404"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.406" starttime="20190115 16:47:31.405"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.407" starttime="20190115 16:47:31.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.407" starttime="20190115 16:47:31.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.409" starttime="20190115 16:47:31.408"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.410" starttime="20190115 16:47:31.409"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.410" starttime="20190115 16:47:31.410"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.411" starttime="20190115 16:47:31.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.412" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.412" starttime="20190115 16:47:31.412"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.412" starttime="20190115 16:47:31.412"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.413" critical="yes" starttime="20190115 16:47:31.006"></status>
</test>
<test id="s1-s10-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:31.496" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.496" starttime="20190115 16:47:31.415"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.498" starttime="20190115 16:47:31.497"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.499" starttime="20190115 16:47:31.498"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.500" starttime="20190115 16:47:31.499"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.501" starttime="20190115 16:47:31.500"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.502" starttime="20190115 16:47:31.502"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.503" starttime="20190115 16:47:31.502"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.504" starttime="20190115 16:47:31.503"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.505" starttime="20190115 16:47:31.504"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.506" starttime="20190115 16:47:31.505"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.507" starttime="20190115 16:47:31.506"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.508" starttime="20190115 16:47:31.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.508" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.508" starttime="20190115 16:47:31.508"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.509" starttime="20190115 16:47:31.508"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.509" starttime="20190115 16:47:31.509"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.510" critical="yes" starttime="20190115 16:47:31.414"></status>
</test>
<test id="s1-s10-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:31.949" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.949" starttime="20190115 16:47:31.512"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.951" starttime="20190115 16:47:31.950"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.952" starttime="20190115 16:47:31.951"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.953" starttime="20190115 16:47:31.952"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.955" starttime="20190115 16:47:31.953"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.956" starttime="20190115 16:47:31.955"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.957" starttime="20190115 16:47:31.956"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:31.958" starttime="20190115 16:47:31.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:31.958" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:31.958" starttime="20190115 16:47:31.958"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:31.959" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:31.959" starttime="20190115 16:47:31.959"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:31.959" critical="yes" starttime="20190115 16:47:31.511"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to provide you with some help building out the Robot Framework regression tests. The following assumes that the team member helping you is most likely a developer.
The developer helping you is comfortable with contributing to a test that uses a few keywords from the standard Robot Framework BuiltIn Library, and the rest is
handled by a user-created library. In this case the library is written in Python...</doc>
<status status="PASS" endtime="20190115 16:47:31.961" starttime="20190115 16:47:30.542"></status>
</suite>
<status status="PASS" endtime="20190115 16:47:31.967" starttime="20190115 16:47:30.512"></status>
</suite>
<suite id="s1-s11" name="Robot Framework test run with user-created Python Library in serial">
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Python-Library1.robot" id="s1-s11-s1" name="Docker-Example-Python-Library1">
<test id="s1-s11-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:27.210" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.210" starttime="20190115 16:47:26.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.211" starttime="20190115 16:47:27.211"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.212" starttime="20190115 16:47:27.212"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.214" starttime="20190115 16:47:27.213"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.215" starttime="20190115 16:47:27.214"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.216" starttime="20190115 16:47:27.216"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.218" starttime="20190115 16:47:27.217"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.218" starttime="20190115 16:47:27.218"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.220" starttime="20190115 16:47:27.219"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.221" starttime="20190115 16:47:27.221"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.222" starttime="20190115 16:47:27.222"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.223" starttime="20190115 16:47:27.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:47:27.224" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.224" starttime="20190115 16:47:27.224"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.225" starttime="20190115 16:47:27.224"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:27.226" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:47:27.226" starttime="20190115 16:47:27.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:47:27.227" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.227" starttime="20190115 16:47:27.226"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:27.227" critical="yes" starttime="20190115 16:47:26.663"></status>
</test>
<test id="s1-s11-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:27.704" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.704" starttime="20190115 16:47:27.229"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.706" starttime="20190115 16:47:27.705"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.708" starttime="20190115 16:47:27.707"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.710" starttime="20190115 16:47:27.709"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.711" starttime="20190115 16:47:27.710"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.712" starttime="20190115 16:47:27.712"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.713" starttime="20190115 16:47:27.713"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.714" starttime="20190115 16:47:27.714"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.715" starttime="20190115 16:47:27.715"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.716" starttime="20190115 16:47:27.716"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.717" starttime="20190115 16:47:27.716"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.717" starttime="20190115 16:47:27.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:27.718" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.718" starttime="20190115 16:47:27.718"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.719" starttime="20190115 16:47:27.719"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:27.719" critical="yes" starttime="20190115 16:47:27.228"></status>
</test>
<test id="s1-s11-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:27.850" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.850" starttime="20190115 16:47:27.722"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.852" starttime="20190115 16:47:27.851"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.853" starttime="20190115 16:47:27.852"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.855" starttime="20190115 16:47:27.854"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.857" starttime="20190115 16:47:27.856"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.858" starttime="20190115 16:47:27.858"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.860" starttime="20190115 16:47:27.859"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.861" starttime="20190115 16:47:27.860"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.863" starttime="20190115 16:47:27.861"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.864" starttime="20190115 16:47:27.863"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.865" starttime="20190115 16:47:27.865"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.866" starttime="20190115 16:47:27.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:27.868" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:27.868" starttime="20190115 16:47:27.867"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.870" starttime="20190115 16:47:27.869"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:27.871" starttime="20190115 16:47:27.870"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:27.871" critical="yes" starttime="20190115 16:47:27.721"></status>
</test>
<test id="s1-s11-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:28.329" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:28.329" starttime="20190115 16:47:27.874"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.330" starttime="20190115 16:47:28.329"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.332" starttime="20190115 16:47:28.331"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.333" starttime="20190115 16:47:28.333"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.335" starttime="20190115 16:47:28.334"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.336" starttime="20190115 16:47:28.335"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.338" starttime="20190115 16:47:28.337"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.339" starttime="20190115 16:47:28.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:28.340" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:28.340" starttime="20190115 16:47:28.339"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:28.342" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:28.342" starttime="20190115 16:47:28.341"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:28.342" critical="yes" starttime="20190115 16:47:27.872"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to provide you with some help building out the Robot Framework regression tests. The following assumes that the team member helping you is most likely a developer.
The developer helping you is comfortable with contributing to a test that uses a few keywords from the standard Robot Framework BuiltIn Library, and the rest is
handled by a user-created library. In this case the library is written in Python...</doc>
<status status="PASS" endtime="20190115 16:47:28.344" starttime="20190115 16:47:26.560"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Python-Library2.robot" id="s1-s11-s2" name="Docker-Example-Python-Library2">
<test id="s1-s11-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:28.767" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:28.767" starttime="20190115 16:47:28.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.768" starttime="20190115 16:47:28.767"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.770" starttime="20190115 16:47:28.769"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.771" starttime="20190115 16:47:28.770"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.773" starttime="20190115 16:47:28.772"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.774" starttime="20190115 16:47:28.773"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.775" starttime="20190115 16:47:28.774"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.776" starttime="20190115 16:47:28.776"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.778" starttime="20190115 16:47:28.777"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.779" starttime="20190115 16:47:28.778"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.780" starttime="20190115 16:47:28.780"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.781" starttime="20190115 16:47:28.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:28.782" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:28.783" starttime="20190115 16:47:28.782"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:28.784" starttime="20190115 16:47:28.783"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:28.785" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:47:28.785" starttime="20190115 16:47:28.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:47:28.786" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:28.786" starttime="20190115 16:47:28.786"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:28.787" critical="yes" starttime="20190115 16:47:28.356"></status>
</test>
<test id="s1-s11-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:29.253" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:29.253" starttime="20190115 16:47:28.789"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.255" starttime="20190115 16:47:29.254"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.257" starttime="20190115 16:47:29.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.259" starttime="20190115 16:47:29.258"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.261" starttime="20190115 16:47:29.260"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.262" starttime="20190115 16:47:29.262"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.263" starttime="20190115 16:47:29.262"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.263" starttime="20190115 16:47:29.263"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.264" starttime="20190115 16:47:29.264"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.265" starttime="20190115 16:47:29.265"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.265" starttime="20190115 16:47:29.265"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.266" starttime="20190115 16:47:29.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:29.267" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:29.267" starttime="20190115 16:47:29.266"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.268" starttime="20190115 16:47:29.267"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:29.268" critical="yes" starttime="20190115 16:47:28.787"></status>
</test>
<test id="s1-s11-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:29.334" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:29.334" starttime="20190115 16:47:29.270"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.335" starttime="20190115 16:47:29.334"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.337" starttime="20190115 16:47:29.336"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.339" starttime="20190115 16:47:29.338"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.340" starttime="20190115 16:47:29.340"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.342" starttime="20190115 16:47:29.341"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.343" starttime="20190115 16:47:29.343"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.344" starttime="20190115 16:47:29.344"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.346" starttime="20190115 16:47:29.345"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.348" starttime="20190115 16:47:29.347"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.349" starttime="20190115 16:47:29.348"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.349" starttime="20190115 16:47:29.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:29.350" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:29.350" starttime="20190115 16:47:29.350"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.351" starttime="20190115 16:47:29.350"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.352" starttime="20190115 16:47:29.351"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:29.352" critical="yes" starttime="20190115 16:47:29.269"></status>
</test>
<test id="s1-s11-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:29.691" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:29.691" starttime="20190115 16:47:29.354"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.693" starttime="20190115 16:47:29.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.695" starttime="20190115 16:47:29.694"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.696" starttime="20190115 16:47:29.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.698" starttime="20190115 16:47:29.696"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.699" starttime="20190115 16:47:29.698"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.700" starttime="20190115 16:47:29.699"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:29.701" starttime="20190115 16:47:29.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:29.703" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:29.703" starttime="20190115 16:47:29.702"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:29.704" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:29.705" starttime="20190115 16:47:29.704"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:29.705" critical="yes" starttime="20190115 16:47:29.353"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to provide you with some help building out the Robot Framework regression tests. The following assumes that the team member helping you is most likely a developer.
The developer helping you is comfortable with contributing to a test that uses a few keywords from the standard Robot Framework BuiltIn Library, and the rest is
handled by a user-created library. In this case the library is written in Python...</doc>
<status status="PASS" endtime="20190115 16:47:29.707" starttime="20190115 16:47:28.347"></status>
</suite>
<status status="PASS" endtime="20190115 16:47:29.710" starttime="20190115 16:47:26.528"></status>
</suite>
<suite id="s1-s12" name="Robot Framework test run with user-created Python Library in parallel">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Python-Library1-Enhanced-Version.robot" id="s1-s12-s1" name="Docker-Example-Python-Library1-Enhanced-Version">
<test id="s1-s12-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:00.393" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:00.393" starttime="20190115 16:48:00.079"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.394" starttime="20190115 16:48:00.393"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.396" starttime="20190115 16:48:00.395"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.397" starttime="20190115 16:48:00.396"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.398" starttime="20190115 16:48:00.397"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.399" starttime="20190115 16:48:00.398"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.400" starttime="20190115 16:48:00.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.401" starttime="20190115 16:48:00.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:00.402" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:00.402" starttime="20190115 16:48:00.401"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:48:00.403" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:48:00.403" starttime="20190115 16:48:00.402"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.404" starttime="20190115 16:48:00.403"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.404" starttime="20190115 16:48:00.403"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:00.404" critical="yes" starttime="20190115 16:48:00.076"></status>
</test>
<test id="s1-s12-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:00.475" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:00.475" starttime="20190115 16:48:00.409"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.476" starttime="20190115 16:48:00.475"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.478" starttime="20190115 16:48:00.477"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.479" starttime="20190115 16:48:00.478"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.480" starttime="20190115 16:48:00.479"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.481" starttime="20190115 16:48:00.480"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.482" starttime="20190115 16:48:00.481"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.483" starttime="20190115 16:48:00.482"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.484" starttime="20190115 16:48:00.483"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.485" starttime="20190115 16:48:00.484"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.486" starttime="20190115 16:48:00.485"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.487" starttime="20190115 16:48:00.486"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:00.487" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190115 16:48:00.488" level="FAIL">200 == 200</msg>
<status status="FAIL" endtime="20190115 16:48:00.488" starttime="20190115 16:48:00.487"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:48:00.490" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:48:00.494" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:00.597" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:00.597" starttime="20190115 16:48:00.489"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:48:00.599" starttime="20190115 16:48:00.598"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.599" starttime="20190115 16:48:00.489"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.599" starttime="20190115 16:48:00.489"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.599" starttime="20190115 16:48:00.488"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.600" starttime="20190115 16:48:00.488"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" endtime="20190115 16:48:00.600" critical="yes" starttime="20190115 16:48:00.407">200 == 200</status>
</test>
<test id="s1-s12-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:01.088" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.088" starttime="20190115 16:48:00.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.090" starttime="20190115 16:48:01.089"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.091" starttime="20190115 16:48:01.090"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.092" starttime="20190115 16:48:01.091"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.094" starttime="20190115 16:48:01.093"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.095" starttime="20190115 16:48:01.094"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.096" starttime="20190115 16:48:01.095"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.097" starttime="20190115 16:48:01.096"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.098" starttime="20190115 16:48:01.097"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.099" starttime="20190115 16:48:01.099"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.100" starttime="20190115 16:48:01.100"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.101" starttime="20190115 16:48:01.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:48:01.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.102" starttime="20190115 16:48:01.101"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.102" starttime="20190115 16:48:01.102"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:48:01.103" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:48:01.103" starttime="20190115 16:48:01.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:48:01.104" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.104" starttime="20190115 16:48:01.103"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.105" starttime="20190115 16:48:01.104"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:01.105" starttime="20190115 16:48:01.104"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:01.105" critical="yes" starttime="20190115 16:48:00.603"></status>
</test>
<test id="s1-s12-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:01.493" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.493" starttime="20190115 16:48:01.108"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.495" starttime="20190115 16:48:01.494"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.495" starttime="20190115 16:48:01.495"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.496" starttime="20190115 16:48:01.496"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.497" starttime="20190115 16:48:01.496"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.498" starttime="20190115 16:48:01.498"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.499" starttime="20190115 16:48:01.499"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.500" starttime="20190115 16:48:01.499"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.501" starttime="20190115 16:48:01.500"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.503" starttime="20190115 16:48:01.501"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.505" starttime="20190115 16:48:01.504"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.506" starttime="20190115 16:48:01.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:01.506" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.507" starttime="20190115 16:48:01.506"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.507" starttime="20190115 16:48:01.507"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.508" starttime="20190115 16:48:01.508"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:01.508" starttime="20190115 16:48:01.507"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:01.508" critical="yes" starttime="20190115 16:48:01.106"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" endtime="20190115 16:48:01.510" starttime="20190115 16:47:59.903"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Python-Library2-Enhanced-Version.robot" id="s1-s12-s2" name="Docker-Example-Python-Library2-Enhanced-Version">
<test id="s1-s12-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:00.400" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:00.401" starttime="20190115 16:48:00.098"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.402" starttime="20190115 16:48:00.401"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.403" starttime="20190115 16:48:00.402"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.404" starttime="20190115 16:48:00.403"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.405" starttime="20190115 16:48:00.404"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.406" starttime="20190115 16:48:00.405"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.407" starttime="20190115 16:48:00.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.408" starttime="20190115 16:48:00.407"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:00.409" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190115 16:48:00.409" level="FAIL">200 == 200</msg>
<status status="FAIL" endtime="20190115 16:48:00.409" starttime="20190115 16:48:00.408"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:48:00.411" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:48:00.416" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:00.517" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:00.518" starttime="20190115 16:48:00.411"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:48:00.519" starttime="20190115 16:48:00.518"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.519" starttime="20190115 16:48:00.410"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.520" starttime="20190115 16:48:00.410"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.520" starttime="20190115 16:48:00.410"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:00.520" starttime="20190115 16:48:00.409"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" endtime="20190115 16:48:00.520" critical="yes" starttime="20190115 16:48:00.097">200 == 200</status>
</test>
<test id="s1-s12-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:00.998" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:00.998" starttime="20190115 16:48:00.527"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:00.999" starttime="20190115 16:48:00.998"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.001" starttime="20190115 16:48:01.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.002" starttime="20190115 16:48:01.001"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.003" starttime="20190115 16:48:01.002"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.004" starttime="20190115 16:48:01.003"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.005" starttime="20190115 16:48:01.004"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.006" starttime="20190115 16:48:01.005"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.008" starttime="20190115 16:48:01.006"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.008" starttime="20190115 16:48:01.008"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.009" starttime="20190115 16:48:01.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.010" starttime="20190115 16:48:01.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:01.011" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.011" starttime="20190115 16:48:01.010"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.011" starttime="20190115 16:48:01.011"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.012" starttime="20190115 16:48:01.012"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:01.012" starttime="20190115 16:48:01.012"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:01.013" critical="yes" starttime="20190115 16:48:00.525"></status>
</test>
<test id="s1-s12-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:01.349" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.349" starttime="20190115 16:48:01.016"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.351" starttime="20190115 16:48:01.349"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.352" starttime="20190115 16:48:01.351"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.353" starttime="20190115 16:48:01.352"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.354" starttime="20190115 16:48:01.353"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.356" starttime="20190115 16:48:01.355"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.357" starttime="20190115 16:48:01.356"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.358" starttime="20190115 16:48:01.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.359" starttime="20190115 16:48:01.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.360" starttime="20190115 16:48:01.359"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.361" starttime="20190115 16:48:01.360"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.362" starttime="20190115 16:48:01.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:01.362" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.362" starttime="20190115 16:48:01.362"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.363" starttime="20190115 16:48:01.362"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:48:01.363" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:48:01.363" starttime="20190115 16:48:01.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:48:01.364" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.364" starttime="20190115 16:48:01.364"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.365" starttime="20190115 16:48:01.365"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:01.365" starttime="20190115 16:48:01.364"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:01.365" critical="yes" starttime="20190115 16:48:01.014"></status>
</test>
<test id="s1-s12-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:01.433" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.433" starttime="20190115 16:48:01.368"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.435" starttime="20190115 16:48:01.433"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.436" starttime="20190115 16:48:01.435"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.437" starttime="20190115 16:48:01.436"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.439" starttime="20190115 16:48:01.437"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.440" starttime="20190115 16:48:01.439"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.441" starttime="20190115 16:48:01.440"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.442" starttime="20190115 16:48:01.441"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.443" starttime="20190115 16:48:01.442"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.444" starttime="20190115 16:48:01.443"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.445" starttime="20190115 16:48:01.444"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.445" starttime="20190115 16:48:01.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:01.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:01.446" starttime="20190115 16:48:01.446"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.447" starttime="20190115 16:48:01.446"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.447" starttime="20190115 16:48:01.447"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:01.448" starttime="20190115 16:48:01.448"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:01.448" starttime="20190115 16:48:01.447"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:01.448" critical="yes" starttime="20190115 16:48:01.366"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" endtime="20190115 16:48:01.450" starttime="20190115 16:47:59.911"></status>
</suite>
<metadata>
<item name="Randomized">Suites and tests (seed 1596776769761916485)</item>
</metadata>
<status status="FAIL" endtime="20190115 16:48:01.513" starttime="20190115 16:47:59.869"></status>
</suite>
<suite id="s1-s13" name="Robot Framework test run with user-created Python Library at a time in serial random order">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Python-Library2-Enhanced-Version.robot" id="s1-s13-s1" name="Docker-Example-Python-Library2-Enhanced-Version">
<test id="s1-s13-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:08.786" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.786" starttime="20190115 16:48:08.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.788" starttime="20190115 16:48:08.787"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.789" starttime="20190115 16:48:08.789"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.791" starttime="20190115 16:48:08.790"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.793" starttime="20190115 16:48:08.792"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.794" starttime="20190115 16:48:08.793"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.795" starttime="20190115 16:48:08.794"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.796" starttime="20190115 16:48:08.796"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:08.797" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190115 16:48:08.797" level="FAIL">200 == 200</msg>
<status status="FAIL" endtime="20190115 16:48:08.797" starttime="20190115 16:48:08.797"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:48:08.800" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:48:08.804" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:08.907" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:08.907" starttime="20190115 16:48:08.800"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.908"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.799"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.799"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.799"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.910" starttime="20190115 16:48:08.798"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" endtime="20190115 16:48:08.910" critical="yes" starttime="20190115 16:48:08.406">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 200 == 200&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 200 == 200</status>
</test>
<test id="s1-s13-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:07.966" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.966" starttime="20190115 16:48:07.568"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.968" starttime="20190115 16:48:07.967"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.970" starttime="20190115 16:48:07.969"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.971" starttime="20190115 16:48:07.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.972" starttime="20190115 16:48:07.972"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.973" starttime="20190115 16:48:07.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.974" starttime="20190115 16:48:07.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.976" starttime="20190115 16:48:07.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.977" starttime="20190115 16:48:07.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.978" starttime="20190115 16:48:07.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.979" starttime="20190115 16:48:07.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.980" starttime="20190115 16:48:07.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:07.981" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.981" starttime="20190115 16:48:07.981"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.982" starttime="20190115 16:48:07.982"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:48:07.983" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:48:07.983" starttime="20190115 16:48:07.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:48:07.984" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.984" starttime="20190115 16:48:07.983"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.985" starttime="20190115 16:48:07.985"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.985" starttime="20190115 16:48:07.984"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:07.986" critical="yes" starttime="20190115 16:48:07.566">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s13-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:08.296" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.296" starttime="20190115 16:48:07.989"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.297" starttime="20190115 16:48:08.297"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.299" starttime="20190115 16:48:08.298"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.300" starttime="20190115 16:48:08.299"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.301" starttime="20190115 16:48:08.301"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.304" starttime="20190115 16:48:08.302"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.305" starttime="20190115 16:48:08.304"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.306" starttime="20190115 16:48:08.306"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.308" starttime="20190115 16:48:08.307"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.309" starttime="20190115 16:48:08.309"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.311" starttime="20190115 16:48:08.310"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.312" starttime="20190115 16:48:08.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:08.313" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.313" starttime="20190115 16:48:08.312"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.314" starttime="20190115 16:48:08.313"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.315" starttime="20190115 16:48:08.315"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.315" starttime="20190115 16:48:08.314"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:08.315" critical="yes" starttime="20190115 16:48:07.987">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s13-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:08.385" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.385" starttime="20190115 16:48:08.319"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.387" starttime="20190115 16:48:08.386"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.388" starttime="20190115 16:48:08.388"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.390" starttime="20190115 16:48:08.389"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.391" starttime="20190115 16:48:08.391"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.393" starttime="20190115 16:48:08.392"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.394" starttime="20190115 16:48:08.394"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.395" starttime="20190115 16:48:08.395"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.396" starttime="20190115 16:48:08.396"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.398" starttime="20190115 16:48:08.397"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.399" starttime="20190115 16:48:08.398"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.400" starttime="20190115 16:48:08.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:08.401" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.401" starttime="20190115 16:48:08.401"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.402" starttime="20190115 16:48:08.402"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.403" starttime="20190115 16:48:08.402"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.404" starttime="20190115 16:48:08.404"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.404" starttime="20190115 16:48:08.403"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:08.404" critical="yes" starttime="20190115 16:48:08.317">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" elapsedtime="1339" endtime="N/A" starttime="N/A"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Python-Library1-Enhanced-Version.robot" id="s1-s13-s2" name="Docker-Example-Python-Library1-Enhanced-Version">
<test id="s1-s13-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:06.456" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.456" starttime="20190115 16:48:06.132"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.458" starttime="20190115 16:48:06.457"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.459" starttime="20190115 16:48:06.458"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.460" starttime="20190115 16:48:06.460"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.462" starttime="20190115 16:48:06.461"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.463" starttime="20190115 16:48:06.463"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.464" starttime="20190115 16:48:06.464"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.465" starttime="20190115 16:48:06.465"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.466" starttime="20190115 16:48:06.466"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.468" starttime="20190115 16:48:06.467"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.469" starttime="20190115 16:48:06.468"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.470" starttime="20190115 16:48:06.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:48:06.470" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.471" starttime="20190115 16:48:06.470"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.471" starttime="20190115 16:48:06.471"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:48:06.472" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:48:06.472" starttime="20190115 16:48:06.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:48:06.473" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.473" starttime="20190115 16:48:06.473"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.474" starttime="20190115 16:48:06.474"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:06.474" starttime="20190115 16:48:06.474"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:06.475" critical="yes" starttime="20190115 16:48:06.130">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s13-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:06.947" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.947" starttime="20190115 16:48:06.879"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.949" starttime="20190115 16:48:06.948"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.950" starttime="20190115 16:48:06.950"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.952" starttime="20190115 16:48:06.951"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.953" starttime="20190115 16:48:06.952"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.954" starttime="20190115 16:48:06.953"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.955" starttime="20190115 16:48:06.954"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.956" starttime="20190115 16:48:06.955"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.957" starttime="20190115 16:48:06.956"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.958" starttime="20190115 16:48:06.958"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.959" starttime="20190115 16:48:06.959"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.960" starttime="20190115 16:48:06.960"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:06.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190115 16:48:06.961" level="FAIL">200 == 200</msg>
<status status="FAIL" endtime="20190115 16:48:06.961" starttime="20190115 16:48:06.960"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:48:06.963" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:48:06.967" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:07.069" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:07.069" starttime="20190115 16:48:06.963"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:48:07.070" starttime="20190115 16:48:07.070"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.963"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.962"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.962"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.962"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" endtime="20190115 16:48:07.072" critical="yes" starttime="20190115 16:48:06.878">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;New message: 200 == 200&lt;hr&gt;Old status: &lt;span class="fail"&gt;FAIL&lt;/span&gt;&lt;br&gt;Old message: 200 == 200</status>
</test>
<test id="s1-s13-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:07.523" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.524" starttime="20190115 16:48:07.076"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.525" starttime="20190115 16:48:07.524"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.526" starttime="20190115 16:48:07.526"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.528" starttime="20190115 16:48:07.527"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.529" starttime="20190115 16:48:07.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.530" starttime="20190115 16:48:07.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.531" starttime="20190115 16:48:07.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.532" starttime="20190115 16:48:07.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:07.533" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.534" starttime="20190115 16:48:07.533"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:48:07.535" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:48:07.535" starttime="20190115 16:48:07.534"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.536" starttime="20190115 16:48:07.536"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.536" starttime="20190115 16:48:07.535"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:07.536" critical="yes" starttime="20190115 16:48:07.075">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<test id="s1-s13-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:06.859" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.859" starttime="20190115 16:48:06.478"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.861" starttime="20190115 16:48:06.860"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.862" starttime="20190115 16:48:06.862"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.864" starttime="20190115 16:48:06.863"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.865" starttime="20190115 16:48:06.864"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.866" starttime="20190115 16:48:06.866"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.867" starttime="20190115 16:48:06.867"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.868" starttime="20190115 16:48:06.868"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.870" starttime="20190115 16:48:06.869"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.871" starttime="20190115 16:48:06.871"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.872" starttime="20190115 16:48:06.871"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.873" starttime="20190115 16:48:06.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:06.874" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.874" starttime="20190115 16:48:06.873"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.875" starttime="20190115 16:48:06.874"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.876" starttime="20190115 16:48:06.876"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:06.876" starttime="20190115 16:48:06.875"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:06.876" critical="yes" starttime="20190115 16:48:06.477">*HTML* Re-executed test has been merged.&lt;hr&gt;New status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;New message: &lt;hr&gt;Old status: &lt;span class="pass"&gt;PASS&lt;/span&gt;&lt;br&gt;Old message: </status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" elapsedtime="1399" endtime="N/A" starttime="N/A"></status>
</suite>
<metadata>
<item name="Randomized">Suites and tests (seed 1023704896415934365)</item>
</metadata>
<status status="FAIL" elapsedtime="2738" endtime="N/A" starttime="N/A"></status>
</suite>
<suite id="s1-s14" name="Robot Framework test run with Requests Library in parallel">
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Requests-Library1.robot" id="s1-s14-s1" name="Docker-Example-Requests-Library1">
<test id="s1-s14-s1-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:10.375" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:10.375" starttime="20190115 16:47:10.374"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:10.376" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:10.376" starttime="20190115 16:47:10.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:10.743" level="INFO">Post Request using : alias=jsonplaceholder, uri=/posts, data=&lt;empty&gt;, headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:10.744" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:10.744" starttime="20190115 16:47:10.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.745" starttime="20190115 16:47:10.744"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.746" starttime="20190115 16:47:10.745"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.747" starttime="20190115 16:47:10.746"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.748" starttime="20190115 16:47:10.747"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.750" starttime="20190115 16:47:10.749"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.750" starttime="20190115 16:47:10.750"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.752" starttime="20190115 16:47:10.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.753" starttime="20190115 16:47:10.752"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.753" starttime="20190115 16:47:10.753"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.754" starttime="20190115 16:47:10.754"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.755" starttime="20190115 16:47:10.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:47:10.756" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:10.756" starttime="20190115 16:47:10.755"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.756" starttime="20190115 16:47:10.756"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:10.757" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:47:10.757" starttime="20190115 16:47:10.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:47:10.757" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:10.757" starttime="20190115 16:47:10.757"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:10.758" critical="yes" starttime="20190115 16:47:10.372"></status>
</test>
<test id="s1-s14-s1-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:10.761" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:10.761" starttime="20190115 16:47:10.761"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:10.761" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:10.762" starttime="20190115 16:47:10.761"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>data={"title":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:11.221" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/1, data={"title":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:11.221" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.221" starttime="20190115 16:47:10.762"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.222" starttime="20190115 16:47:11.221"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.223" starttime="20190115 16:47:11.222"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.224" starttime="20190115 16:47:11.224"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.226" starttime="20190115 16:47:11.225"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.227" starttime="20190115 16:47:11.226"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.228" starttime="20190115 16:47:11.227"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.229" starttime="20190115 16:47:11.228"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.230" starttime="20190115 16:47:11.229"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.231" starttime="20190115 16:47:11.231"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.232" starttime="20190115 16:47:11.231"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.233" starttime="20190115 16:47:11.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:11.234" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.234" starttime="20190115 16:47:11.233"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.234" starttime="20190115 16:47:11.234"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:11.234" critical="yes" starttime="20190115 16:47:10.759"></status>
</test>
<test id="s1-s14-s1-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:11.238" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:11.238" starttime="20190115 16:47:11.237"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:11.238" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:11.239" starttime="20190115 16:47:11.238"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:11.314" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/1, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20190115 16:47:11.315" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.315" starttime="20190115 16:47:11.239"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.316" starttime="20190115 16:47:11.315"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.318" starttime="20190115 16:47:11.317"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.319" starttime="20190115 16:47:11.318"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.320" starttime="20190115 16:47:11.319"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.321" starttime="20190115 16:47:11.321"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.323" starttime="20190115 16:47:11.322"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.324" starttime="20190115 16:47:11.323"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.325" starttime="20190115 16:47:11.324"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.326" starttime="20190115 16:47:11.325"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.327" starttime="20190115 16:47:11.326"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.328" starttime="20190115 16:47:11.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:11.328" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.328" starttime="20190115 16:47:11.328"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.329" starttime="20190115 16:47:11.328"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.329" starttime="20190115 16:47:11.329"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:11.329" critical="yes" starttime="20190115 16:47:11.236"></status>
</test>
<test id="s1-s14-s1-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:11.332" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:11.332" starttime="20190115 16:47:11.332"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:11.333" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:11.333" starttime="20190115 16:47:11.332"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:11.885" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/1, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:11.885" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.885" starttime="20190115 16:47:11.333"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.887" starttime="20190115 16:47:11.886"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.888" starttime="20190115 16:47:11.887"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.890" starttime="20190115 16:47:11.889"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.891" starttime="20190115 16:47:11.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.892" starttime="20190115 16:47:11.891"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.893" starttime="20190115 16:47:11.892"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.894" starttime="20190115 16:47:11.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:11.895" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.895" starttime="20190115 16:47:11.894"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:11.895" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:11.895" starttime="20190115 16:47:11.895"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:11.896" critical="yes" starttime="20190115 16:47:11.330"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" endtime="20190115 16:47:11.897" starttime="20190115 16:47:10.284"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Requests-Library2.robot" id="s1-s14-s2" name="Docker-Example-Requests-Library2">
<test id="s1-s14-s2-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:10.375" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:10.375" starttime="20190115 16:47:10.374"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:10.376" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:10.376" starttime="20190115 16:47:10.376"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:10.741" level="INFO">Put Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:10.741" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:10.741" starttime="20190115 16:47:10.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.743" starttime="20190115 16:47:10.742"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.744" starttime="20190115 16:47:10.743"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.745" starttime="20190115 16:47:10.744"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.747" starttime="20190115 16:47:10.746"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.748" starttime="20190115 16:47:10.747"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.749" starttime="20190115 16:47:10.748"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.750" starttime="20190115 16:47:10.749"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.752" starttime="20190115 16:47:10.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.753" starttime="20190115 16:47:10.752"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.753" starttime="20190115 16:47:10.753"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.754" starttime="20190115 16:47:10.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:10.755" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:10.755" starttime="20190115 16:47:10.755"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:10.756" starttime="20190115 16:47:10.755"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${PUT_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:10.756" level="INFO">${PUT_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:47:10.756" starttime="20190115 16:47:10.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PUT_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:47:10.757" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:10.757" starttime="20190115 16:47:10.756"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:10.757" critical="yes" starttime="20190115 16:47:10.372"></status>
</test>
<test id="s1-s14-s2-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:10.760" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:10.761" starttime="20190115 16:47:10.760"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:10.761" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:10.761" starttime="20190115 16:47:10.761"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>data={"body":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:11.025" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/2, data={"body":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:11.025" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.025" starttime="20190115 16:47:10.762"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.026" starttime="20190115 16:47:11.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.027" starttime="20190115 16:47:11.026"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.028" starttime="20190115 16:47:11.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.030" starttime="20190115 16:47:11.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.030" starttime="20190115 16:47:11.030"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.032" starttime="20190115 16:47:11.031"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.032" starttime="20190115 16:47:11.032"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.033" starttime="20190115 16:47:11.033"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.034" starttime="20190115 16:47:11.034"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.035" starttime="20190115 16:47:11.034"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.036" starttime="20190115 16:47:11.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:11.036" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.036" starttime="20190115 16:47:11.036"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.037" starttime="20190115 16:47:11.036"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:11.037" critical="yes" starttime="20190115 16:47:10.758"></status>
</test>
<test id="s1-s14-s2-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:11.040" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:11.040" starttime="20190115 16:47:11.039"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:11.040" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:11.040" starttime="20190115 16:47:11.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:11.104" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/2, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20190115 16:47:11.104" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.104" starttime="20190115 16:47:11.040"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.106" starttime="20190115 16:47:11.104"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.107" starttime="20190115 16:47:11.106"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.108" starttime="20190115 16:47:11.107"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.109" starttime="20190115 16:47:11.108"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.110" starttime="20190115 16:47:11.109"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.111" starttime="20190115 16:47:11.110"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.112" starttime="20190115 16:47:11.111"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.113" starttime="20190115 16:47:11.112"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.114" starttime="20190115 16:47:11.113"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.114" starttime="20190115 16:47:11.114"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.115" starttime="20190115 16:47:11.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:11.116" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.116" starttime="20190115 16:47:11.116"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.116" starttime="20190115 16:47:11.116"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.117" starttime="20190115 16:47:11.117"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:11.117" critical="yes" starttime="20190115 16:47:11.038"></status>
</test>
<test id="s1-s14-s2-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:11.121" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:11.121" starttime="20190115 16:47:11.120"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:11.121" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:11.122" starttime="20190115 16:47:11.121"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:11.563" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:11.563" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.563" starttime="20190115 16:47:11.122"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.565" starttime="20190115 16:47:11.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.566" starttime="20190115 16:47:11.565"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.567" starttime="20190115 16:47:11.566"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.569" starttime="20190115 16:47:11.568"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.570" starttime="20190115 16:47:11.569"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.571" starttime="20190115 16:47:11.570"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:11.572" starttime="20190115 16:47:11.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:11.572" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:11.572" starttime="20190115 16:47:11.572"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:11.573" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:11.573" starttime="20190115 16:47:11.573"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:11.573" critical="yes" starttime="20190115 16:47:11.119"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" endtime="20190115 16:47:11.575" starttime="20190115 16:47:10.284"></status>
</suite>
<status status="PASS" endtime="20190115 16:47:11.901" starttime="20190115 16:47:10.252"></status>
</suite>
<suite id="s1-s15" name="Robot Framework test run with Requests Library in serial">
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Requests-Library1.robot" id="s1-s15-s1" name="Docker-Example-Requests-Library1">
<test id="s1-s15-s1-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:06.898" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:06.899" starttime="20190115 16:47:06.897"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:06.899" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:06.900" starttime="20190115 16:47:06.899"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:07.272" level="INFO">Post Request using : alias=jsonplaceholder, uri=/posts, data=&lt;empty&gt;, headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:07.272" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.272" starttime="20190115 16:47:06.900"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.274" starttime="20190115 16:47:07.273"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.275" starttime="20190115 16:47:07.275"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.277" starttime="20190115 16:47:07.276"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.278" starttime="20190115 16:47:07.278"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.280" starttime="20190115 16:47:07.279"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.281" starttime="20190115 16:47:07.280"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.282" starttime="20190115 16:47:07.282"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.283" starttime="20190115 16:47:07.282"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.284" starttime="20190115 16:47:07.283"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.284" starttime="20190115 16:47:07.284"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.285" starttime="20190115 16:47:07.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:47:07.286" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.286" starttime="20190115 16:47:07.285"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.286" starttime="20190115 16:47:07.286"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:07.287" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:47:07.287" starttime="20190115 16:47:07.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:47:07.288" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.288" starttime="20190115 16:47:07.287"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:07.288" critical="yes" starttime="20190115 16:47:06.895"></status>
</test>
<test id="s1-s15-s1-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:07.290" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:07.290" starttime="20190115 16:47:07.290"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:07.291" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:07.291" starttime="20190115 16:47:07.290"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>data={"title":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:07.641" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/1, data={"title":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:07.641" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.641" starttime="20190115 16:47:07.291"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.642" starttime="20190115 16:47:07.642"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.643" starttime="20190115 16:47:07.643"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.644" starttime="20190115 16:47:07.644"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.645" starttime="20190115 16:47:07.645"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.646" starttime="20190115 16:47:07.645"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.647" starttime="20190115 16:47:07.646"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.648" starttime="20190115 16:47:07.647"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.649" starttime="20190115 16:47:07.648"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.650" starttime="20190115 16:47:07.649"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.650" starttime="20190115 16:47:07.650"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.651" starttime="20190115 16:47:07.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:07.652" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.652" starttime="20190115 16:47:07.651"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.653" starttime="20190115 16:47:07.652"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:07.653" critical="yes" starttime="20190115 16:47:07.289"></status>
</test>
<test id="s1-s15-s1-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:07.655" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:07.655" starttime="20190115 16:47:07.655"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:07.656" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:07.656" starttime="20190115 16:47:07.655"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:07.718" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/1, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20190115 16:47:07.718" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.719" starttime="20190115 16:47:07.656"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.720" starttime="20190115 16:47:07.719"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.721" starttime="20190115 16:47:07.720"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.722" starttime="20190115 16:47:07.721"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.722" starttime="20190115 16:47:07.722"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.723" starttime="20190115 16:47:07.723"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.724" starttime="20190115 16:47:07.723"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.725" starttime="20190115 16:47:07.724"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.726" starttime="20190115 16:47:07.725"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.727" starttime="20190115 16:47:07.726"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.728" starttime="20190115 16:47:07.727"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.728" starttime="20190115 16:47:07.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:07.729" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:07.729" starttime="20190115 16:47:07.728"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.730" starttime="20190115 16:47:07.729"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:07.730" starttime="20190115 16:47:07.730"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:07.731" critical="yes" starttime="20190115 16:47:07.653"></status>
</test>
<test id="s1-s15-s1-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:07.733" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:07.733" starttime="20190115 16:47:07.732"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:07.733" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:07.734" starttime="20190115 16:47:07.733"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:08.074" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/1, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:08.075" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.075" starttime="20190115 16:47:07.734"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.076" starttime="20190115 16:47:08.075"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.076" starttime="20190115 16:47:08.076"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.077" starttime="20190115 16:47:08.077"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.078" starttime="20190115 16:47:08.078"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.079" starttime="20190115 16:47:08.078"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.080" starttime="20190115 16:47:08.079"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.080" starttime="20190115 16:47:08.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:08.081" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.081" starttime="20190115 16:47:08.081"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:08.082" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:08.082" starttime="20190115 16:47:08.082"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:08.082" critical="yes" starttime="20190115 16:47:07.731"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" endtime="20190115 16:47:08.084" starttime="20190115 16:47:06.728"></status>
</suite>
<suite source="/rfw/Tests/Part-One--RFW-Strategies-For-Rapidly-Testing-And-Adapting-To-Frequently-Changing-Projects/Docker-Example-Requests-Library2.robot" id="s1-s15-s2" name="Docker-Example-Requests-Library2">
<test id="s1-s15-s2-t1" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:08.096" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:08.096" starttime="20190115 16:47:08.096"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:08.097" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:08.097" starttime="20190115 16:47:08.097"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:08.653" level="INFO">Put Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:08.653" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.653" starttime="20190115 16:47:08.098"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.654" starttime="20190115 16:47:08.653"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.655" starttime="20190115 16:47:08.654"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.656" starttime="20190115 16:47:08.655"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.657" starttime="20190115 16:47:08.656"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.658" starttime="20190115 16:47:08.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.659" starttime="20190115 16:47:08.659"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.661" starttime="20190115 16:47:08.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.662" starttime="20190115 16:47:08.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.663" starttime="20190115 16:47:08.662"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.663" starttime="20190115 16:47:08.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.664" starttime="20190115 16:47:08.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:08.665" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.665" starttime="20190115 16:47:08.665"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.666" starttime="20190115 16:47:08.666"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PUT_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${PUT_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:47:08.667" level="INFO">${PUT_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:47:08.667" starttime="20190115 16:47:08.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PUT_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:47:08.668" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.668" starttime="20190115 16:47:08.668"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:08.668" critical="yes" starttime="20190115 16:47:08.095"></status>
</test>
<test id="s1-s15-s2-t2" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:08.671" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:08.671" starttime="20190115 16:47:08.671"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:08.672" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:08.672" starttime="20190115 16:47:08.671"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>data={"body":"Testing with Robot Framework."}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:08.984" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/2, data={"body":"Testing with Robot Framework."},                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:08.984" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.984" starttime="20190115 16:47:08.672"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.985" starttime="20190115 16:47:08.985"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.986" starttime="20190115 16:47:08.986"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.987" starttime="20190115 16:47:08.987"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.988" starttime="20190115 16:47:08.988"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.989" starttime="20190115 16:47:08.989"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.990" starttime="20190115 16:47:08.990"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.991" starttime="20190115 16:47:08.990"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.992" starttime="20190115 16:47:08.991"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.993" starttime="20190115 16:47:08.992"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.994" starttime="20190115 16:47:08.993"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.994" starttime="20190115 16:47:08.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:08.995" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:08.995" starttime="20190115 16:47:08.994"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:08.996" starttime="20190115 16:47:08.995"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:08.996" critical="yes" starttime="20190115 16:47:08.669"></status>
</test>
<test id="s1-s15-s2-t3" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:08.998" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:08.998" starttime="20190115 16:47:08.998"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:08.999" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:08.999" starttime="20190115 16:47:08.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:09.063" level="INFO">Get Request using : alias=jsonplaceholder, uri=/posts/2, headers={'Content-Type': 'application/json'} json=None</msg>
<msg timestamp="20190115 16:47:09.063" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:09.063" starttime="20190115 16:47:09.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.065" starttime="20190115 16:47:09.064"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.067" starttime="20190115 16:47:09.066"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.068" starttime="20190115 16:47:09.067"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.070" starttime="20190115 16:47:09.069"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.071" starttime="20190115 16:47:09.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.072" starttime="20190115 16:47:09.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.073" starttime="20190115 16:47:09.072"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.074" starttime="20190115 16:47:09.073"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.075" starttime="20190115 16:47:09.074"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.075" starttime="20190115 16:47:09.075"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.076" starttime="20190115 16:47:09.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:09.077" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:09.077" starttime="20190115 16:47:09.076"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.078" starttime="20190115 16:47:09.077"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.079" starttime="20190115 16:47:09.078"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:09.079" critical="yes" starttime="20190115 16:47:08.997"></status>
</test>
<test id="s1-s15-s2-t4" name="REQUESTS LIBRARY EXAMPLE PART ONE - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:47:09.081" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:47:09.081" starttime="20190115 16:47:09.081"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:47:09.082" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:47:09.082" starttime="20190115 16:47:09.081"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/2</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:09.412" level="INFO">Delete Request using : alias=jsonplaceholder, uri=/posts/2, data=None,                     headers={'Content-Type': 'application/json'}, allow_redirects=True </msg>
<msg timestamp="20190115 16:47:09.413" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:47:09.413" starttime="20190115 16:47:09.082"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.414" starttime="20190115 16:47:09.413"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.415" starttime="20190115 16:47:09.415"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.416" starttime="20190115 16:47:09.416"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.418" starttime="20190115 16:47:09.417"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.419" starttime="20190115 16:47:09.418"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.420" starttime="20190115 16:47:09.419"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:09.421" starttime="20190115 16:47:09.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:47:09.422" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:47:09.422" starttime="20190115 16:47:09.421"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:47:09.423" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:47:09.423" starttime="20190115 16:47:09.422"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:09.423" critical="yes" starttime="20190115 16:47:09.079"></status>
</test>
<doc>In a hypothetical scenario, where you are split between 3 or more frequently changing projects. Maybe you were able to convince your team leaders and developers
to let you try out a different and more refined approach for building out your Robot Framework regression tests. The following assumes that your team is comfortable
with looking at and contributing to a test that is mostly written using keywords from a Robot Framework test library. In this case the robotframework-requests library...</doc>
<status status="PASS" endtime="20190115 16:47:09.424" starttime="20190115 16:47:08.087"></status>
</suite>
<status status="PASS" endtime="20190115 16:47:09.426" starttime="20190115 16:47:06.697"></status>
</suite>
<suite id="s1-s16" name="Robot Framework test run with Requests Library in parallel and generate random string test data using Robot Framwork's String library">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Requests-Library1-Enhanced-Version.robot" id="s1-s16-s1" name="Docker-Example-Requests-Library1-Enhanced-Version">
<test id="s1-s16-s1-t1" name="REQUESTS LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using randomized test data generated by built-in Robot Framework keywords and check the response.">
<kw name="Create Various Random Test Data With The String Library" library="SharedKeywordsAndListeners">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>30</arg>
</arguments>
<assign>
<var>${COMPLETELY_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.132" level="INFO">${COMPLETELY_RANDOM_STRING} = LXcRPqmdqon7d5ekeEIScizoobpLpY</msg>
<status status="PASS" endtime="20190115 16:48:16.132" starttime="20190115 16:48:16.132"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>18</arg>
<arg>[LOWER]</arg>
</arguments>
<assign>
<var>${LOWERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.133" level="INFO">${LOWERCASE_LETTERS_RANDOM_STRING} = djsslrvnzlqksnysyv</msg>
<status status="PASS" endtime="20190115 16:48:16.133" starttime="20190115 16:48:16.132"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>20</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.133" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = wJUWPCVnrNsGLvmHhhBc</msg>
<status status="PASS" endtime="20190115 16:48:16.133" starttime="20190115 16:48:16.133"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>aaaaaaaabbbbbb[NUMBERS]</arg>
</arguments>
<assign>
<var>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.134" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = ba9a28921a</msg>
<status status="PASS" endtime="20190115 16:48:16.134" starttime="20190115 16:48:16.134"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.134" level="INFO">${COMPLETELY_RANDOM_STRING} = LXcRPqmdqon7d5ekeEIScizoobpLpY</msg>
<status status="PASS" endtime="20190115 16:48:16.135" starttime="20190115 16:48:16.134"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWER_CASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.135" level="INFO">${LOWER_CASE_LETTERS_RANDOM_STRING} = djsslrvnzlqksnysyv</msg>
<status status="PASS" endtime="20190115 16:48:16.135" starttime="20190115 16:48:16.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.136" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = wJUWPCVnrNsGLvmHhhBc</msg>
<status status="PASS" endtime="20190115 16:48:16.136" starttime="20190115 16:48:16.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.136" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = ba9a28921a</msg>
<status status="PASS" endtime="20190115 16:48:16.136" starttime="20190115 16:48:16.136"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.137" starttime="20190115 16:48:16.136"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>COMPLETELY RANDOM STRING 30 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.138" starttime="20190115 16:48:16.137"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.139" starttime="20190115 16:48:16.138"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.140" starttime="20190115 16:48:16.139"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE LETTERS RANDOM STRING 18 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.141" starttime="20190115 16:48:16.140"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.143" starttime="20190115 16:48:16.141"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.144" starttime="20190115 16:48:16.143"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE AND UPPERCASE LETTERS RANDOM STRING 20 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.144" starttime="20190115 16:48:16.144"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.145" starttime="20190115 16:48:16.145"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.146" starttime="20190115 16:48:16.146"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>RANDOM NUMBERS APPENDED TO LETTERS...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.147" starttime="20190115 16:48:16.146"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.148" starttime="20190115 16:48:16.147"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.149" starttime="20190115 16:48:16.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.149" level="INFO">LXcRPqmdqon7d5ekeEIScizoobpLpY</msg>
<status status="PASS" endtime="20190115 16:48:16.149" starttime="20190115 16:48:16.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.150" level="INFO">djsslrvnzlqksnysyv</msg>
<status status="PASS" endtime="20190115 16:48:16.150" starttime="20190115 16:48:16.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.150" level="INFO">wJUWPCVnrNsGLvmHhhBc</msg>
<status status="PASS" endtime="20190115 16:48:16.150" starttime="20190115 16:48:16.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.151" level="INFO">ba9a28921a</msg>
<status status="PASS" endtime="20190115 16:48:16.151" starttime="20190115 16:48:16.150"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:16.151" starttime="20190115 16:48:16.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:48:16.152" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:48:16.152" starttime="20190115 16:48:16.151"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.153" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:48:16.153" starttime="20190115 16:48:16.152"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>data={"userId": ${COMPLETELY_RANDOM_STRING}}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:16.582" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/1, data="{\"userId\": LXcRPqmdqon7d5ekeEIScizoobpLpY}",                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:48:16.582" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:16.582" starttime="20190115 16:48:16.153"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.584" starttime="20190115 16:48:16.583"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.585" starttime="20190115 16:48:16.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.587" starttime="20190115 16:48:16.586"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.588" starttime="20190115 16:48:16.587"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.589" starttime="20190115 16:48:16.588"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.590" starttime="20190115 16:48:16.589"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.591" starttime="20190115 16:48:16.590"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:16.592" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:16.592" starttime="20190115 16:48:16.591"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:16.592" critical="yes" starttime="20190115 16:48:16.129"></status>
</test>
<doc>Part Two of the robotframework-requests library examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated data to a test through the "Create Various Random Test Data With The String Library" keyword.
This keyword turns the robotframework-requests library examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:16.594" starttime="20190115 16:48:15.987"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Requests-Library2-Enhanced-Version.robot" id="s1-s16-s2" name="Docker-Example-Requests-Library2-Enhanced-Version">
<test id="s1-s16-s2-t1" name="REQUESTS LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts using randomized test data generated by built-in Robot Framework keywords and check the response.">
<kw name="Create Various Random Test Data With The String Library" library="SharedKeywordsAndListeners">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>30</arg>
</arguments>
<assign>
<var>${COMPLETELY_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.132" level="INFO">${COMPLETELY_RANDOM_STRING} = 2qlbquA26tlAbfya63o2gx2n99Dno9</msg>
<status status="PASS" endtime="20190115 16:48:16.133" starttime="20190115 16:48:16.132"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>18</arg>
<arg>[LOWER]</arg>
</arguments>
<assign>
<var>${LOWERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.133" level="INFO">${LOWERCASE_LETTERS_RANDOM_STRING} = biyzyfcyxmtawqpziz</msg>
<status status="PASS" endtime="20190115 16:48:16.133" starttime="20190115 16:48:16.133"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>20</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.133" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = wJtJjPYoEKdgjzNTQpPI</msg>
<status status="PASS" endtime="20190115 16:48:16.134" starttime="20190115 16:48:16.133"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>aaaaaaaabbbbbb[NUMBERS]</arg>
</arguments>
<assign>
<var>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:16.134" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = b32bb5aaba</msg>
<status status="PASS" endtime="20190115 16:48:16.134" starttime="20190115 16:48:16.134"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.135" level="INFO">${COMPLETELY_RANDOM_STRING} = 2qlbquA26tlAbfya63o2gx2n99Dno9</msg>
<status status="PASS" endtime="20190115 16:48:16.135" starttime="20190115 16:48:16.134"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWER_CASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.135" level="INFO">${LOWER_CASE_LETTERS_RANDOM_STRING} = biyzyfcyxmtawqpziz</msg>
<status status="PASS" endtime="20190115 16:48:16.135" starttime="20190115 16:48:16.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.136" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = wJtJjPYoEKdgjzNTQpPI</msg>
<status status="PASS" endtime="20190115 16:48:16.136" starttime="20190115 16:48:16.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.136" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = b32bb5aaba</msg>
<status status="PASS" endtime="20190115 16:48:16.136" starttime="20190115 16:48:16.136"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.137" starttime="20190115 16:48:16.136"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>COMPLETELY RANDOM STRING 30 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.138" starttime="20190115 16:48:16.137"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.139" starttime="20190115 16:48:16.138"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.140" starttime="20190115 16:48:16.139"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE LETTERS RANDOM STRING 18 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.141" starttime="20190115 16:48:16.140"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.143" starttime="20190115 16:48:16.141"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.143" starttime="20190115 16:48:16.143"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE AND UPPERCASE LETTERS RANDOM STRING 20 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.144" starttime="20190115 16:48:16.144"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.145" starttime="20190115 16:48:16.145"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.146" starttime="20190115 16:48:16.146"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>RANDOM NUMBERS APPENDED TO LETTERS...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.147" starttime="20190115 16:48:16.146"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.148" starttime="20190115 16:48:16.147"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.149" starttime="20190115 16:48:16.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.149" level="INFO">2qlbquA26tlAbfya63o2gx2n99Dno9</msg>
<status status="PASS" endtime="20190115 16:48:16.149" starttime="20190115 16:48:16.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.150" level="INFO">biyzyfcyxmtawqpziz</msg>
<status status="PASS" endtime="20190115 16:48:16.150" starttime="20190115 16:48:16.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.150" level="INFO">wJtJjPYoEKdgjzNTQpPI</msg>
<status status="PASS" endtime="20190115 16:48:16.150" starttime="20190115 16:48:16.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.151" level="INFO">b32bb5aaba</msg>
<status status="PASS" endtime="20190115 16:48:16.151" starttime="20190115 16:48:16.150"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:16.151" starttime="20190115 16:48:16.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:48:16.152" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:48:16.152" starttime="20190115 16:48:16.151"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:48:16.153" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:48:16.153" starttime="20190115 16:48:16.152"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:16.653" level="INFO">Put Request using : alias=jsonplaceholder, uri=/posts/2qlbquA26tlAbfya63o2gx2n99Dno9, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:48:16.653" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:16.653" starttime="20190115 16:48:16.153"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.654" starttime="20190115 16:48:16.653"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.655" starttime="20190115 16:48:16.654"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.656" starttime="20190115 16:48:16.655"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.657" starttime="20190115 16:48:16.656"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.658" starttime="20190115 16:48:16.657"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.659" starttime="20190115 16:48:16.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:16.660" starttime="20190115 16:48:16.659"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:16.661" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:16.661" starttime="20190115 16:48:16.660"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:16.661" critical="yes" starttime="20190115 16:48:16.129"></status>
</test>
<doc>Part Two of the robotframework-requests library examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated data to a test through the "Create Various Random Test Data With The String Library" keyword.
This keyword turns the robotframework-requests library examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:16.663" starttime="20190115 16:48:15.981"></status>
</suite>
<status status="PASS" endtime="20190115 16:48:16.666" starttime="20190115 16:48:15.948"></status>
</suite>
<suite id="s1-s17" name="Robot Framework test run with Requests Library in serial and generate random string test data using Robot Framwork's String library">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Requests-Library1-Enhanced-Version.robot" id="s1-s17-s1" name="Docker-Example-Requests-Library1-Enhanced-Version">
<test id="s1-s17-s1-t1" name="REQUESTS LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using randomized test data generated by built-in Robot Framework keywords and check the response.">
<kw name="Create Various Random Test Data With The String Library" library="SharedKeywordsAndListeners">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>30</arg>
</arguments>
<assign>
<var>${COMPLETELY_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.022" level="INFO">${COMPLETELY_RANDOM_STRING} = prN2QyA40bRVvaLdw2PzvwNKmzZgot</msg>
<status status="PASS" endtime="20190115 16:48:14.022" starttime="20190115 16:48:14.021"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>18</arg>
<arg>[LOWER]</arg>
</arguments>
<assign>
<var>${LOWERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.022" level="INFO">${LOWERCASE_LETTERS_RANDOM_STRING} = jbacipdsaivfbrntkr</msg>
<status status="PASS" endtime="20190115 16:48:14.022" starttime="20190115 16:48:14.022"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>20</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.023" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = CBwPazvcAeXVmuttkPFI</msg>
<status status="PASS" endtime="20190115 16:48:14.023" starttime="20190115 16:48:14.022"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>aaaaaaaabbbbbb[NUMBERS]</arg>
</arguments>
<assign>
<var>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.023" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = 194abb4430</msg>
<status status="PASS" endtime="20190115 16:48:14.023" starttime="20190115 16:48:14.023"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.024" level="INFO">${COMPLETELY_RANDOM_STRING} = prN2QyA40bRVvaLdw2PzvwNKmzZgot</msg>
<status status="PASS" endtime="20190115 16:48:14.024" starttime="20190115 16:48:14.023"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWER_CASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.024" level="INFO">${LOWER_CASE_LETTERS_RANDOM_STRING} = jbacipdsaivfbrntkr</msg>
<status status="PASS" endtime="20190115 16:48:14.024" starttime="20190115 16:48:14.024"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.025" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = CBwPazvcAeXVmuttkPFI</msg>
<status status="PASS" endtime="20190115 16:48:14.025" starttime="20190115 16:48:14.024"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.025" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = 194abb4430</msg>
<status status="PASS" endtime="20190115 16:48:14.025" starttime="20190115 16:48:14.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.026" starttime="20190115 16:48:14.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>COMPLETELY RANDOM STRING 30 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.026" starttime="20190115 16:48:14.026"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.027" starttime="20190115 16:48:14.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.028" starttime="20190115 16:48:14.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE LETTERS RANDOM STRING 18 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.028" starttime="20190115 16:48:14.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.029" starttime="20190115 16:48:14.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.029" starttime="20190115 16:48:14.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE AND UPPERCASE LETTERS RANDOM STRING 20 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.030" starttime="20190115 16:48:14.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.030" starttime="20190115 16:48:14.030"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.031" starttime="20190115 16:48:14.031"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>RANDOM NUMBERS APPENDED TO LETTERS...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.031" starttime="20190115 16:48:14.031"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.032" starttime="20190115 16:48:14.032"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.033" starttime="20190115 16:48:14.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.033" level="INFO">prN2QyA40bRVvaLdw2PzvwNKmzZgot</msg>
<status status="PASS" endtime="20190115 16:48:14.033" starttime="20190115 16:48:14.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.034" level="INFO">jbacipdsaivfbrntkr</msg>
<status status="PASS" endtime="20190115 16:48:14.034" starttime="20190115 16:48:14.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.034" level="INFO">CBwPazvcAeXVmuttkPFI</msg>
<status status="PASS" endtime="20190115 16:48:14.034" starttime="20190115 16:48:14.034"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.034" level="INFO">194abb4430</msg>
<status status="PASS" endtime="20190115 16:48:14.035" starttime="20190115 16:48:14.034"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:14.035" starttime="20190115 16:48:14.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:48:14.036" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:48:14.036" starttime="20190115 16:48:14.035"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.037" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:48:14.038" starttime="20190115 16:48:14.037"></status>
</kw>
<kw name="Patch Request" library="RequestsLibrary">
<doc>Send a PATCH request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/1</arg>
<arg>data={"userId": ${COMPLETELY_RANDOM_STRING}}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:14.526" level="INFO">Patch Request using : alias=jsonplaceholder, uri=/posts/1, data="{\"userId\": prN2QyA40bRVvaLdw2PzvwNKmzZgot}",                     headers={'Content-Type': 'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:48:14.526" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:14.526" starttime="20190115 16:48:14.038"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.528" starttime="20190115 16:48:14.527"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.529" starttime="20190115 16:48:14.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.530" starttime="20190115 16:48:14.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.532" starttime="20190115 16:48:14.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.533" starttime="20190115 16:48:14.532"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.534" starttime="20190115 16:48:14.533"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.535" starttime="20190115 16:48:14.534"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:14.536" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:14.536" starttime="20190115 16:48:14.535"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:14.536" critical="yes" starttime="20190115 16:48:14.019"></status>
</test>
<doc>Part Two of the robotframework-requests library examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated data to a test through the "Create Various Random Test Data With The String Library" keyword.
This keyword turns the robotframework-requests library examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:14.538" starttime="20190115 16:48:13.872"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Requests-Library2-Enhanced-Version.robot" id="s1-s17-s2" name="Docker-Example-Requests-Library2-Enhanced-Version">
<test id="s1-s17-s2-t1" name="REQUESTS LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts using randomized test data generated by built-in Robot Framework keywords and check the response.">
<kw name="Create Various Random Test Data With The String Library" library="SharedKeywordsAndListeners">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>30</arg>
</arguments>
<assign>
<var>${COMPLETELY_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.573" level="INFO">${COMPLETELY_RANDOM_STRING} = jYKhrqHt3d0WF2OgYPiAtmM2TOnkpL</msg>
<status status="PASS" endtime="20190115 16:48:14.573" starttime="20190115 16:48:14.572"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>18</arg>
<arg>[LOWER]</arg>
</arguments>
<assign>
<var>${LOWERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.574" level="INFO">${LOWERCASE_LETTERS_RANDOM_STRING} = smgwxoczoeibkbemuj</msg>
<status status="PASS" endtime="20190115 16:48:14.574" starttime="20190115 16:48:14.573"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>20</arg>
<arg>[LETTERS]</arg>
</arguments>
<assign>
<var>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.575" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = VeLAgbukRJSmlonJAZIh</msg>
<status status="PASS" endtime="20190115 16:48:14.575" starttime="20190115 16:48:14.575"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>10</arg>
<arg>aaaaaaaabbbbbb[NUMBERS]</arg>
</arguments>
<assign>
<var>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</var>
</assign>
<msg timestamp="20190115 16:48:14.576" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = 9b7a4ba87a</msg>
<status status="PASS" endtime="20190115 16:48:14.576" starttime="20190115 16:48:14.576"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.577" level="INFO">${COMPLETELY_RANDOM_STRING} = jYKhrqHt3d0WF2OgYPiAtmM2TOnkpL</msg>
<status status="PASS" endtime="20190115 16:48:14.577" starttime="20190115 16:48:14.576"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWER_CASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.578" level="INFO">${LOWER_CASE_LETTERS_RANDOM_STRING} = smgwxoczoeibkbemuj</msg>
<status status="PASS" endtime="20190115 16:48:14.578" starttime="20190115 16:48:14.578"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.579" level="INFO">${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING} = VeLAgbukRJSmlonJAZIh</msg>
<status status="PASS" endtime="20190115 16:48:14.579" starttime="20190115 16:48:14.579"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.580" level="INFO">${LETTERS_WITH_NUMBERS_RANDOM_STRING} = 9b7a4ba87a</msg>
<status status="PASS" endtime="20190115 16:48:14.580" starttime="20190115 16:48:14.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.580" starttime="20190115 16:48:14.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>COMPLETELY RANDOM STRING 30 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.581" starttime="20190115 16:48:14.581"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.582" starttime="20190115 16:48:14.582"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.583" starttime="20190115 16:48:14.582"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE LETTERS RANDOM STRING 18 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.584" starttime="20190115 16:48:14.583"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.584" starttime="20190115 16:48:14.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.585" starttime="20190115 16:48:14.585"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>LOWERCASE AND UPPERCASE LETTERS RANDOM STRING 20 CHARACTERS LONG...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.586" starttime="20190115 16:48:14.585"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.587" starttime="20190115 16:48:14.586"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.587" starttime="20190115 16:48:14.587"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>RANDOM NUMBERS APPENDED TO LETTERS...</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.588" starttime="20190115 16:48:14.587"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.589" starttime="20190115 16:48:14.588"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>-------</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:14.589" starttime="20190115 16:48:14.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.590" level="INFO">jYKhrqHt3d0WF2OgYPiAtmM2TOnkpL</msg>
<status status="PASS" endtime="20190115 16:48:14.590" starttime="20190115 16:48:14.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.590" level="INFO">smgwxoczoeibkbemuj</msg>
<status status="PASS" endtime="20190115 16:48:14.590" starttime="20190115 16:48:14.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LOWERCASE_UPPERCASE_LETTERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.591" level="INFO">VeLAgbukRJSmlonJAZIh</msg>
<status status="PASS" endtime="20190115 16:48:14.591" starttime="20190115 16:48:14.591"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${LETTERS_WITH_NUMBERS_RANDOM_STRING}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.591" level="INFO">9b7a4ba87a</msg>
<status status="PASS" endtime="20190115 16:48:14.591" starttime="20190115 16:48:14.591"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:14.592" starttime="20190115 16:48:14.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type</arg>
<arg>application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20190115 16:48:14.592" level="INFO">${HEADERS} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" endtime="20190115 16:48:14.592" starttime="20190115 16:48:14.592"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>http://${BASE_URL}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<msg timestamp="20190115 16:48:14.593" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={'Content-Type': 'application/json'},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190115 16:48:14.594" starttime="20190115 16:48:14.593"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>/posts/${COMPLETELY_RANDOM_STRING}</arg>
</arguments>
<assign>
<var>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:15.038" level="INFO">Put Request using : alias=jsonplaceholder, uri=/posts/jYKhrqHt3d0WF2OgYPiAtmM2TOnkpL, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190115 16:48:15.038" level="INFO">${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:15.038" starttime="20190115 16:48:14.594"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.039" starttime="20190115 16:48:15.039"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.041" starttime="20190115 16:48:15.040"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.042" starttime="20190115 16:48:15.042"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.044" starttime="20190115 16:48:15.043"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.045" starttime="20190115 16:48:15.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.046" starttime="20190115 16:48:15.045"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:15.047" starttime="20190115 16:48:15.046"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${REQUESTS_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:15.047" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:15.048" starttime="20190115 16:48:15.047"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:15.048" critical="yes" starttime="20190115 16:48:14.570"></status>
</test>
<doc>Part Two of the robotframework-requests library examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated data to a test through the "Create Various Random Test Data With The String Library" keyword.
This keyword turns the robotframework-requests library examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:15.049" starttime="20190115 16:48:14.541"></status>
</suite>
<status status="PASS" endtime="20190115 16:48:15.052" starttime="20190115 16:48:13.839"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Postman-Newman-Enhanced-Version.robot" id="s1-s18" name="Robot Framework test run with a Postman Newman Collection running one Postman Folder at a time in serial random order">
<test id="s1-s18-t1" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_post</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:46.019" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:46.023" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:48.155" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:48.155" starttime="20190115 16:47:46.019"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_post</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:48.157" level="INFO">${POSTMAN_POST_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 524ms]</msg>
<status status="PASS" endtime="20190115 16:47:48.157" starttime="20190115 16:47:48.157"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:48.159" level="INFO">newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 524ms]</msg>
<status status="PASS" endtime="20190115 16:47:48.159" starttime="20190115 16:47:48.158"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.160" starttime="20190115 16:47:48.159"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.161" starttime="20190115 16:47:48.161"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.162" starttime="20190115 16:47:48.162"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.164" starttime="20190115 16:47:48.163"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.165" starttime="20190115 16:47:48.164"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.166" starttime="20190115 16:47:48.165"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.167" starttime="20190115 16:47:48.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
<arg>201 Created</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.168" starttime="20190115 16:47:48.168"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:48.169" starttime="20190115 16:47:48.169"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:48.169" starttime="20190115 16:47:48.169"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:48.170" critical="yes" starttime="20190115 16:47:46.017"></status>
</test>
<test id="s1-s18-t2" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:48.174" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:48.178" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:50.517" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:50.518" starttime="20190115 16:47:48.174"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:50.520" level="INFO">${POSTMAN_PATCH_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]</msg>
<status status="PASS" endtime="20190115 16:47:50.520" starttime="20190115 16:47:50.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:50.522" level="INFO">newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]</msg>
<status status="PASS" endtime="20190115 16:47:50.522" starttime="20190115 16:47:50.521"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.523" starttime="20190115 16:47:50.522"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.524" starttime="20190115 16:47:50.524"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.526" starttime="20190115 16:47:50.525"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.527" starttime="20190115 16:47:50.527"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.528" starttime="20190115 16:47:50.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.529" starttime="20190115 16:47:50.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:50.530" starttime="20190115 16:47:50.530"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<msg timestamp="20190115 16:47:50.531" level="FAIL">'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]' contains '200 OK'</msg>
<status status="FAIL" endtime="20190115 16:47:50.531" starttime="20190115 16:47:50.530"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Postman-Newman-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:50.533" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Postman-Newman-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:47:50.537" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:50.638" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:50.639" starttime="20190115 16:47:50.533"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:47:50.640" starttime="20190115 16:47:50.639"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.640" starttime="20190115 16:47:50.533"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.640" starttime="20190115 16:47:50.532"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.641" starttime="20190115 16:47:50.532"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:50.641" starttime="20190115 16:47:50.532"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="FAIL" endtime="20190115 16:47:50.641" critical="yes" starttime="20190115 16:47:48.172">'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 702ms]' contains '200 OK'</status>
</test>
<test id="s1-s18-t3" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:50.646" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:50.651" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:52.375" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:52.376" starttime="20190115 16:47:50.645"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:52.378" level="INFO">${POSTMAN_GET_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 210ms]</msg>
<status status="PASS" endtime="20190115 16:47:52.378" starttime="20190115 16:47:52.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:52.379" level="INFO">newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 210ms]</msg>
<status status="PASS" endtime="20190115 16:47:52.380" starttime="20190115 16:47:52.379"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.381" starttime="20190115 16:47:52.380"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.382" starttime="20190115 16:47:52.382"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.384" starttime="20190115 16:47:52.383"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.385" starttime="20190115 16:47:52.385"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.387" starttime="20190115 16:47:52.386"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.388" starttime="20190115 16:47:52.387"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.389" starttime="20190115 16:47:52.389"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.390" starttime="20190115 16:47:52.389"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:52.391" starttime="20190115 16:47:52.391"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:52.391" starttime="20190115 16:47:52.390"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:52.391" critical="yes" starttime="20190115 16:47:50.643"></status>
</test>
<test id="s1-s18-t4" name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:47:52.394" level="INFO">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg timestamp="20190115 16:47:52.398" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:47:54.525" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:47:54.526" starttime="20190115 16:47:52.394"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:47:54.527" level="INFO">${POSTMAN_DELETE_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 522ms]</msg>
<status status="PASS" endtime="20190115 16:47:54.527" starttime="20190115 16:47:54.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<msg timestamp="20190115 16:47:54.528" level="INFO">newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 522ms]</msg>
<status status="PASS" endtime="20190115 16:47:54.528" starttime="20190115 16:47:54.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.529" starttime="20190115 16:47:54.529"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.530" starttime="20190115 16:47:54.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.531" starttime="20190115 16:47:54.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.532" starttime="20190115 16:47:54.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.533" starttime="20190115 16:47:54.532"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.534" starttime="20190115 16:47:54.533"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.534" starttime="20190115 16:47:54.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.535" starttime="20190115 16:47:54.535"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:47:54.537" starttime="20190115 16:47:54.536"></status>
</kw>
<status status="PASS" endtime="20190115 16:47:54.537" starttime="20190115 16:47:54.536"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:47:54.537" critical="yes" starttime="20190115 16:47:52.393"></status>
</test>
<doc>Part Two of the Postman Newman example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize tests" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" endtime="20190115 16:47:54.539" starttime="20190115 16:47:45.911"></status>
</suite>
<suite id="s1-s19" name="Robot Framework test run with user-created Python Library at a time in serial random order">
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Python-Library1-Enhanced-Version.robot" id="s1-s19-s1" name="Docker-Example-Python-Library1-Enhanced-Version">
<test id="s1-s19-s1-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a POST request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Post Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:06.456" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.456" starttime="20190115 16:48:06.132"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.458" starttime="20190115 16:48:06.457"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.459" starttime="20190115 16:48:06.458"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.460" starttime="20190115 16:48:06.460"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.462" starttime="20190115 16:48:06.461"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.463" starttime="20190115 16:48:06.463"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.464" starttime="20190115 16:48:06.464"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.465" starttime="20190115 16:48:06.465"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.466" starttime="20190115 16:48:06.466"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.468" starttime="20190115 16:48:06.467"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.469" starttime="20190115 16:48:06.468"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.470" starttime="20190115 16:48:06.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20190115 16:48:06.470" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.471" starttime="20190115 16:48:06.470"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.471" starttime="20190115 16:48:06.471"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:48:06.472" level="INFO">${POST_RESPONSE_VALUES} = [101]</msg>
<status status="PASS" endtime="20190115 16:48:06.472" starttime="20190115 16:48:06.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[101]</arg>
</arguments>
<msg timestamp="20190115 16:48:06.473" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.473" starttime="20190115 16:48:06.473"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.474" starttime="20190115 16:48:06.474"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:06.474" starttime="20190115 16:48:06.474"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:06.475" critical="yes" starttime="20190115 16:48:06.130"></status>
</test>
<test id="s1-s19-s1-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Patch Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:06.859" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.859" starttime="20190115 16:48:06.478"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.861" starttime="20190115 16:48:06.860"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.862" starttime="20190115 16:48:06.862"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.864" starttime="20190115 16:48:06.863"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.865" starttime="20190115 16:48:06.864"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.866" starttime="20190115 16:48:06.866"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.867" starttime="20190115 16:48:06.867"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.868" starttime="20190115 16:48:06.868"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.870" starttime="20190115 16:48:06.869"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.871" starttime="20190115 16:48:06.871"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.872" starttime="20190115 16:48:06.871"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.873" starttime="20190115 16:48:06.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:06.874" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.874" starttime="20190115 16:48:06.873"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.875" starttime="20190115 16:48:06.874"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.876" starttime="20190115 16:48:06.876"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:06.876" starttime="20190115 16:48:06.875"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:06.876" critical="yes" starttime="20190115 16:48:06.477"></status>
</test>
<test id="s1-s19-s1-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Get Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:06.947" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:06.947" starttime="20190115 16:48:06.879"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.949" starttime="20190115 16:48:06.948"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.950" starttime="20190115 16:48:06.950"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.952" starttime="20190115 16:48:06.951"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.953" starttime="20190115 16:48:06.952"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.954" starttime="20190115 16:48:06.953"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.955" starttime="20190115 16:48:06.954"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.956" starttime="20190115 16:48:06.955"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.957" starttime="20190115 16:48:06.956"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.958" starttime="20190115 16:48:06.958"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.959" starttime="20190115 16:48:06.959"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:06.960" starttime="20190115 16:48:06.960"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:06.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190115 16:48:06.961" level="FAIL">200 == 200</msg>
<status status="FAIL" endtime="20190115 16:48:06.961" starttime="20190115 16:48:06.960"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:48:06.963" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library1-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:48:06.967" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:07.069" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:07.069" starttime="20190115 16:48:06.963"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:48:07.070" starttime="20190115 16:48:07.070"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.963"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.962"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.962"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.071" starttime="20190115 16:48:06.962"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" endtime="20190115 16:48:07.072" critical="yes" starttime="20190115 16:48:06.878">200 == 200</status>
</test>
<test id="s1-s19-s1-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE ONE : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response.">
<kw name="Send Delete Request Robot File One" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:07.523" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.524" starttime="20190115 16:48:07.076"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.525" starttime="20190115 16:48:07.524"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.526" starttime="20190115 16:48:07.526"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.528" starttime="20190115 16:48:07.527"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.529" starttime="20190115 16:48:07.528"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.530" starttime="20190115 16:48:07.530"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.531" starttime="20190115 16:48:07.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.532" starttime="20190115 16:48:07.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:07.533" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.534" starttime="20190115 16:48:07.533"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_ONE_DELETE_RESPONSE.json()}</arg>
</arguments>
<msg timestamp="20190115 16:48:07.535" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190115 16:48:07.535" starttime="20190115 16:48:07.534"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.536" starttime="20190115 16:48:07.536"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.536" starttime="20190115 16:48:07.535"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:07.536" critical="yes" starttime="20190115 16:48:07.075"></status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" endtime="20190115 16:48:07.538" starttime="20190115 16:48:05.965"></status>
</suite>
<suite source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Python-Library2-Enhanced-Version.robot" id="s1-s19-s2" name="Docker-Example-Python-Library2-Enhanced-Version">
<test id="s1-s19-s2-t1" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PUT request to jsonplaceholder.typicode.com/posts and check the response.">
<kw name="Send Put Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:07.966" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.966" starttime="20190115 16:48:07.568"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.968" starttime="20190115 16:48:07.967"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.970" starttime="20190115 16:48:07.969"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.971" starttime="20190115 16:48:07.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.972" starttime="20190115 16:48:07.972"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.973" starttime="20190115 16:48:07.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.974" starttime="20190115 16:48:07.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.976" starttime="20190115 16:48:07.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.977" starttime="20190115 16:48:07.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.978" starttime="20190115 16:48:07.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.979" starttime="20190115 16:48:07.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.980" starttime="20190115 16:48:07.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:07.981" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.981" starttime="20190115 16:48:07.981"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.982" starttime="20190115 16:48:07.982"></status>
</kw>
<kw name="Get Dictionary Values" library="Collections">
<doc>Returns values of the given dictionary.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_POST_RESPONSE.json()}</arg>
</arguments>
<assign>
<var>${POST_RESPONSE_VALUES}</var>
</assign>
<msg timestamp="20190115 16:48:07.983" level="INFO">${POST_RESPONSE_VALUES} = [2]</msg>
<status status="PASS" endtime="20190115 16:48:07.983" starttime="20190115 16:48:07.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${POST_RESPONSE_VALUES}</arg>
<arg>[2]</arg>
</arguments>
<msg timestamp="20190115 16:48:07.984" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:07.984" starttime="20190115 16:48:07.983"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:07.985" starttime="20190115 16:48:07.985"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:07.985" starttime="20190115 16:48:07.984"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:07.986" critical="yes" starttime="20190115 16:48:07.566"></status>
</test>
<test id="s1-s19-s2-t2" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;body&quot; for jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Patch Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:08.296" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.296" starttime="20190115 16:48:07.989"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.297" starttime="20190115 16:48:08.297"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.299" starttime="20190115 16:48:08.298"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.300" starttime="20190115 16:48:08.299"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.301" starttime="20190115 16:48:08.301"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.304" starttime="20190115 16:48:08.302"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.305" starttime="20190115 16:48:08.304"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.306" starttime="20190115 16:48:08.306"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.308" starttime="20190115 16:48:08.307"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.309" starttime="20190115 16:48:08.309"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.311" starttime="20190115 16:48:08.310"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.312" starttime="20190115 16:48:08.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:08.313" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.313" starttime="20190115 16:48:08.312"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_PATCH_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.314" starttime="20190115 16:48:08.313"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.315" starttime="20190115 16:48:08.315"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.315" starttime="20190115 16:48:08.314"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:08.315" critical="yes" starttime="20190115 16:48:07.987"></status>
</test>
<test id="s1-s19-s2-t3" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a GET request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Get Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:08.385" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.385" starttime="20190115 16:48:08.319"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.387" starttime="20190115 16:48:08.386"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.388" starttime="20190115 16:48:08.388"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.390" starttime="20190115 16:48:08.389"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.391" starttime="20190115 16:48:08.391"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.393" starttime="20190115 16:48:08.392"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.394" starttime="20190115 16:48:08.394"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.395" starttime="20190115 16:48:08.395"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.396" starttime="20190115 16:48:08.396"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.398" starttime="20190115 16:48:08.397"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.399" starttime="20190115 16:48:08.398"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.400" starttime="20190115 16:48:08.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:08.401" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.401" starttime="20190115 16:48:08.401"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>qui est esse</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.402" starttime="20190115 16:48:08.402"></status>
</kw>
<kw name="Dictionary Should Not Contain Value" library="Collections">
<doc>Fails if ``value`` is found from ``dictionary``.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_GET_RESPONSE.json()}</arg>
<arg>Testing with Robot Framework.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.403" starttime="20190115 16:48:08.402"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.404" starttime="20190115 16:48:08.404"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.404" starttime="20190115 16:48:08.403"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:08.404" critical="yes" starttime="20190115 16:48:08.317"></status>
</test>
<test id="s1-s19-s2-t4" name="USER-CREATED PYTHON LIBRARY EXAMPLE PART TWO - ROBOT FILE TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/2 and check the response.">
<kw name="Send Delete Request Robot File Two" library="DockerExample">
<assign>
<var>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</var>
</assign>
<msg timestamp="20190115 16:48:08.786" level="INFO">${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190115 16:48:08.786" starttime="20190115 16:48:08.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.788" starttime="20190115 16:48:08.787"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.789" starttime="20190115 16:48:08.789"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.791" starttime="20190115 16:48:08.790"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.793" starttime="20190115 16:48:08.792"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.794" starttime="20190115 16:48:08.793"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.795" starttime="20190115 16:48:08.794"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:08.796" starttime="20190115 16:48:08.796"></status>
</kw>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are equal after converting them to strings.</doc>
<arguments>
<arg>${PYTHON_LIBRARY_ROBOT_FILE_TWO_DELETE_RESPONSE.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190115 16:48:08.797" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20190115 16:48:08.797" level="FAIL">200 == 200</msg>
<status status="FAIL" endtime="20190115 16:48:08.797" starttime="20190115 16:48:08.797"></status>
</kw>
<kw type="teardown" name="Trigger Only After Failure">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg timestamp="20190115 16:48:08.800" level="INFO">Starting process:
echo "The regression tests in the Docker-Example-Python-Library2-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg timestamp="20190115 16:48:08.804" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190115 16:48:08.907" level="INFO">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:08.907" starttime="20190115 16:48:08.800"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.908"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.799"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.799"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.909" starttime="20190115 16:48:08.799"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:08.910" starttime="20190115 16:48:08.798"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Slightly_Refined_And_Room_For_Enhancements</tag>
</tags>
<status status="FAIL" endtime="20190115 16:48:08.910" critical="yes" starttime="20190115 16:48:08.406">200 == 200</status>
</test>
<doc>Part Two of the Python Library example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize all" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites" option.</doc>
<status status="FAIL" endtime="20190115 16:48:08.914" starttime="20190115 16:48:07.541"></status>
</suite>
<status status="FAIL" endtime="20190115 16:48:08.919" starttime="20190115 16:48:05.935"></status>
</suite>
<status status="FAIL" elapsedtime="2088533" endtime="N/A" starttime="N/A"></status>
</suite>
<statistics>
<total>
<stat fail="9" pass="89">Critical Tests</stat>
<stat fail="9" pass="89">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Hybrid_Manual_Automated_Android_SBTM_Test</stat>
<stat fail="1" pass="1">Hybrid_Manual_Automated_Desktop_SBTM_Test</stat>
<stat fail="8" pass="84">Regression_Tests</stat>
<stat fail="6" pass="54">Slightly_Refined_And_Room_For_Enhancements</stat>
<stat fail="2" pass="30">Unrefined_And_Created_In_A_Hurry</stat>
</tag>
<suite>
<stat fail="9" id="s1" name="Combined Results Dashboard - " pass="89">Combined Results Dashboard - </stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
