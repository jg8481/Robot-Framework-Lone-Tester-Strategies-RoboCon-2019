<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.5.6 on linux)" generated="20190114 15:35:58.734" rpa="false">
<suite name="Robot Framework test run with a Postman Newman Collection running one Postman Folder at a time in serial random order" id="s1" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Postman-Newman-Enhanced-Version.robot">
<test name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a POST request to jsonplaceholder.typicode.com/posts and check the response." id="s1-t1">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_post</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:35:58.857">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send POST to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg level="INFO" timestamp="20190114 15:35:58.861">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 15:36:01.385">Process completed.</msg>
<status status="PASS" endtime="20190114 15:36:01.386" starttime="20190114 15:35:58.857"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_post</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_POST_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190114 15:36:01.388">${POSTMAN_POST_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 602ms]</msg>
<status status="PASS" endtime="20190114 15:36:01.388" starttime="20190114 15:36:01.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:01.389">newman

jsonplaceholder.typicode.com

→ Send POST to jsonplaceholder.typicode.com
  POST https://jsonplaceholder.typicode.com/posts [201 Created, 822B, 602ms]</msg>
<status status="PASS" endtime="20190114 15:36:01.389" starttime="20190114 15:36:01.389"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.390" starttime="20190114 15:36:01.390"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.391" starttime="20190114 15:36:01.391"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.392" starttime="20190114 15:36:01.392"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.393" starttime="20190114 15:36:01.393"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.394" starttime="20190114 15:36:01.394"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.395" starttime="20190114 15:36:01.394"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.396" starttime="20190114 15:36:01.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_POST_RESPONSE}</arg>
<arg>201 Created</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.396" starttime="20190114 15:36:01.396"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:01.398" starttime="20190114 15:36:01.398"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:01.398" starttime="20190114 15:36:01.397"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190114 15:36:01.398" starttime="20190114 15:35:58.855" critical="yes"></status>
</test>
<test name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 and check the response." id="s1-t2">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_patch</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:01.402">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send PATCH to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg level="INFO" timestamp="20190114 15:36:01.406">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 15:36:03.832">Process completed.</msg>
<status status="PASS" endtime="20190114 15:36:03.832" starttime="20190114 15:36:01.402"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_patch</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_PATCH_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190114 15:36:03.834">${POSTMAN_PATCH_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 469ms]</msg>
<status status="PASS" endtime="20190114 15:36:03.835" starttime="20190114 15:36:03.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:03.836">newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 469ms]</msg>
<status status="PASS" endtime="20190114 15:36:03.836" starttime="20190114 15:36:03.835"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.837" starttime="20190114 15:36:03.836"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.838" starttime="20190114 15:36:03.838"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.840" starttime="20190114 15:36:03.839"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.841" starttime="20190114 15:36:03.840"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.842" starttime="20190114 15:36:03.841"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.842" starttime="20190114 15:36:03.842"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:03.843" starttime="20190114 15:36:03.843"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<msg level="FAIL" timestamp="20190114 15:36:03.844">'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 469ms]' contains '200 OK'</msg>
<status status="FAIL" endtime="20190114 15:36:03.844" starttime="20190114 15:36:03.843"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<kw name="Failure Detected Notify Team">
<kw name="Send Short Message Through Slack And Email" library="SharedKeywordsAndListeners">
<arguments>
<arg>regression tests in the Docker-Example-Postman-Newman-Enhanced-Version.robot file</arg>
<arg>${TEST_ENVIRONMENT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "The ${TEST_NAME} failed in the ${TEST_ENVIRONMENT} environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:03.847">Starting process:
echo "The regression tests in the Docker-Example-Postman-Newman-Enhanced-Version.robot file failed in the QA environment." | slacktee.sh -i :nerd_face: --plain-text --config /rfw/Shared-Resources/.slacktee</msg>
<msg level="INFO" timestamp="20190114 15:36:03.852">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 15:36:04.155">Process completed.</msg>
<status status="PASS" endtime="20190114 15:36:04.155" starttime="20190114 15:36:03.846"></status>
</kw>
<kw name="Send Email Notification" library="TestFailureEmailNotification">
<doc>When a test fails you can send an email. Here are some examples that could work...</doc>
<status status="PASS" endtime="20190114 15:36:04.156" starttime="20190114 15:36:04.156"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:04.157" starttime="20190114 15:36:03.846"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:04.157" starttime="20190114 15:36:03.845"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:04.157" starttime="20190114 15:36:03.845"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:04.157" starttime="20190114 15:36:03.845"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="FAIL" endtime="20190114 15:36:04.157" starttime="20190114 15:36:01.400" critical="yes">'newman

jsonplaceholder.typicode.com

→ Send PATCH to jsonplaceholder.typicode.com
  PATCH https://jsonplaceholder.typicode.com/posts/1 [200 OK, 960B, 469ms]' contains '200 OK'</status>
</test>
<test name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a GET request to jsonplaceholder.typicode.com/posts/1 and check the response." id="s1-t3">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_get</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:04.169">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send GET to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg level="INFO" timestamp="20190114 15:36:04.174">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 15:36:06.595">Process completed.</msg>
<status status="PASS" endtime="20190114 15:36:06.595" starttime="20190114 15:36:04.168"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_get</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_GET_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190114 15:36:06.598">${POSTMAN_GET_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 246ms]</msg>
<status status="PASS" endtime="20190114 15:36:06.599" starttime="20190114 15:36:06.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:06.600">newman

jsonplaceholder.typicode.com

→ Send GET to jsonplaceholder.typicode.com
  GET https://jsonplaceholder.typicode.com/posts/1 [200 OK, 1.04KB, 246ms]</msg>
<status status="PASS" endtime="20190114 15:36:06.600" starttime="20190114 15:36:06.599"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.601" starttime="20190114 15:36:06.600"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.602" starttime="20190114 15:36:06.602"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.603" starttime="20190114 15:36:06.603"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.605" starttime="20190114 15:36:06.604"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.605" starttime="20190114 15:36:06.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.606" starttime="20190114 15:36:06.606"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.607" starttime="20190114 15:36:06.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_GET_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.608" starttime="20190114 15:36:06.608"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:06.610" starttime="20190114 15:36:06.609"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:06.610" starttime="20190114 15:36:06.609"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190114 15:36:06.610" starttime="20190114 15:36:04.163" critical="yes"></status>
</test>
<test name="POSTMAN NEWMAN COLLECTION EXAMPLE PART TWO : Send a DELETE request to jsonplaceholder.typicode.com/posts/1 and check the response." id="s1-t4">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>newman run ${PATH}//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</arg>
<arg>alias=postman_delete</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:06.613">Starting process:
newman run /rfw//Tests//Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further//Resources//jsonplaceholder.typicode.com.postman_collection.json --folder 'Send DELETE to jsonplaceholder.typicode.com' --reporter-cli-no-summary --color off --reporter-cli-no-console</msg>
<msg level="INFO" timestamp="20190114 15:36:06.619">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 15:36:09.354">Process completed.</msg>
<status status="PASS" endtime="20190114 15:36:09.354" starttime="20190114 15:36:06.613"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>postman_delete</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${POSTMAN_DELETE_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190114 15:36:09.356">${POSTMAN_DELETE_RESPONSE} = newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 509ms]</msg>
<status status="PASS" endtime="20190114 15:36:09.356" starttime="20190114 15:36:09.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 15:36:09.358">newman

jsonplaceholder.typicode.com

→ Send DELETE to jsonplaceholder.typicode.com
  DELETE https://jsonplaceholder.typicode.com/posts/1 [200 OK, 681B, 509ms]</msg>
<status status="PASS" endtime="20190114 15:36:09.358" starttime="20190114 15:36:09.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.359" starttime="20190114 15:36:09.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.360" starttime="20190114 15:36:09.360"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.361" starttime="20190114 15:36:09.361"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.362" starttime="20190114 15:36:09.362"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.364" starttime="20190114 15:36:09.363"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.365" starttime="20190114 15:36:09.365"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.366" starttime="20190114 15:36:09.366"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${POSTMAN_DELETE_RESPONSE}</arg>
<arg>200 OK</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.368" starttime="20190114 15:36:09.367"></status>
</kw>
<kw name="Trigger Only After Failure" type="teardown">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Failure Detected Notify Team</arg>
</arguments>
<status status="PASS" endtime="20190114 15:36:09.369" starttime="20190114 15:36:09.369"></status>
</kw>
<status status="PASS" endtime="20190114 15:36:09.369" starttime="20190114 15:36:09.368"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190114 15:36:09.369" starttime="20190114 15:36:06.612" critical="yes"></status>
</test>
<doc>Part Two of the Postman Newman example has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add 2 types of Robot Framework listeners and a team notification keyword.
Also added the "--randomize tests" option in the commands-running-inside-a-docker-container.sh script, and will demonstrate the use of the "--rerunfailedsuites".</doc>
<status status="FAIL" endtime="20190114 15:36:09.371" starttime="20190114 15:35:58.736"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="3">Critical Tests</stat>
<stat fail="1" pass="3">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="3">Regression_Tests</stat>
<stat fail="1" pass="3">Unrefined_And_Created_In_A_Hurry</stat>
</tag>
<suite>
<stat fail="1" name="Robot Framework test run with a Postman Newman Collection running one Postman Folder at a time in serial random order" pass="3" id="s1">Robot Framework test run with a Postman Newman Collection running one Postman Folder at a time in serial random order</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
