<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generator="Robot 3.1.1 (Python 3.5.6 on linux)" generated="20190114 14:04:09.450">
<suite name="Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer" id="s1">
<suite name="Docker-Example-Curl1-Enhanced-Version" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl1-Enhanced-Version.robot" id="s1-s1">
<test name="CURL EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response." id="s1-s1-t1">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:09.575">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg level="INFO" timestamp="20190114 14:04:09.581">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 14:04:09.683">Process completed.</msg>
<status starttime="20190114 14:04:09.574" endtime="20190114 14:04:09.683" status="PASS"></status>
</kw>
<status starttime="20190114 14:04:09.574" endtime="20190114 14:04:09.683" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:09.688">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt'.</msg>
<status starttime="20190114 14:04:09.684" endtime="20190114 14:04:10.114" status="PASS"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190114 14:04:10.115" html="yes">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<msg level="INFO" timestamp="20190114 14:04:10.120">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Mon, 14 Jan 2019 14:04:10 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d78c175628f945a2015...</msg>
<status starttime="20190114 14:04:10.115" endtime="20190114 14:04:10.120" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:10.121">HTTP/1.1 500 Internal Server Error
Date: Mon, 14 Jan 2019 14:04:10 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d78c175628f945a201508b67a4b82d3c21547474649; expires=Tue, 14-Jan-20 14:04:09 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4990a67123076481-FRA

SyntaxError: Unexpected token ï in JSON at position 11
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status starttime="20190114 14:04:10.120" endtime="20190114 14:04:10.121" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.122" endtime="20190114 14:04:10.122" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.123" endtime="20190114 14:04:10.123" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.123" endtime="20190114 14:04:10.124" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status starttime="20190114 14:04:10.124" endtime="20190114 14:04:10.125" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.125" endtime="20190114 14:04:10.126" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.126" endtime="20190114 14:04:10.127" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.127" endtime="20190114 14:04:10.127" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status starttime="20190114 14:04:10.128" endtime="20190114 14:04:10.128" status="PASS"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status starttime="20190114 14:04:09.572" endtime="20190114 14:04:10.128" critical="yes" status="PASS"></status>
</test>
<kw name="Remove File" type="teardown" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:10.133" html="yes">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<status starttime="20190114 14:04:10.131" endtime="20190114 14:04:10.133" status="PASS"></status>
</kw>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status starttime="20190114 14:04:09.487" endtime="20190114 14:04:10.133" status="PASS"></status>
</suite>
<suite name="Docker-Example-Curl2-Enhanced-Version" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl2-Enhanced-Version.robot" id="s1-s2">
<test name="CURL EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response." id="s1-s2-t1">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:10.169">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg level="INFO" timestamp="20190114 14:04:10.175">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190114 14:04:10.276">Process completed.</msg>
<status starttime="20190114 14:04:10.168" endtime="20190114 14:04:10.276" status="PASS"></status>
</kw>
<status starttime="20190114 14:04:10.167" endtime="20190114 14:04:10.277" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:10.282">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt'.</msg>
<status starttime="20190114 14:04:10.277" endtime="20190114 14:04:10.612" status="PASS"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190114 14:04:10.614" html="yes">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<msg level="INFO" timestamp="20190114 14:04:10.620">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Mon, 14 Jan 2019 14:04:10 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=df256628d26d34ed8d8...</msg>
<status starttime="20190114 14:04:10.613" endtime="20190114 14:04:10.620" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:10.621">HTTP/1.1 500 Internal Server Error
Date: Mon, 14 Jan 2019 14:04:10 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=df256628d26d34ed8d8d3dc38a748981f1547474650; expires=Tue, 14-Jan-20 14:04:10 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4990a67475d864cf-FRA

SyntaxError: Unexpected token ¯ in JSON at position 10
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status starttime="20190114 14:04:10.620" endtime="20190114 14:04:10.621" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.621" endtime="20190114 14:04:10.622" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.623" endtime="20190114 14:04:10.624" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.624" endtime="20190114 14:04:10.625" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status starttime="20190114 14:04:10.626" endtime="20190114 14:04:10.626" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.628" endtime="20190114 14:04:10.628" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.630" endtime="20190114 14:04:10.631" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status starttime="20190114 14:04:10.632" endtime="20190114 14:04:10.632" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status starttime="20190114 14:04:10.633" endtime="20190114 14:04:10.634" status="PASS"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status starttime="20190114 14:04:10.166" endtime="20190114 14:04:10.635" critical="yes" status="PASS"></status>
</test>
<kw name="Remove File" type="teardown" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190114 14:04:10.642" html="yes">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<status starttime="20190114 14:04:10.638" endtime="20190114 14:04:10.642" status="PASS"></status>
</kw>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status starttime="20190114 14:04:10.136" endtime="20190114 14:04:10.643" status="PASS"></status>
</suite>
<status starttime="20190114 14:04:09.454" endtime="20190114 14:04:10.647" status="PASS"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="0">Critical Tests</stat>
<stat pass="2" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="0">Regression_Tests</stat>
<stat pass="2" fail="0">Unrefined_And_Created_In_A_Hurry</stat>
</tag>
<suite>
<stat name="Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer" pass="2" id="s1" fail="0">Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer</stat>
<stat name="Docker-Example-Curl1-Enhanced-Version" pass="1" id="s1-s1" fail="0">Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer.Docker-Example-Curl1-Enhanced-Version</stat>
<stat name="Docker-Example-Curl2-Enhanced-Version" pass="1" id="s1-s2" fail="0">Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer.Docker-Example-Curl2-Enhanced-Version</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
