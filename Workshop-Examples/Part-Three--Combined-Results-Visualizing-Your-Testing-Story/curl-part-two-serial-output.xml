<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generator="Robot 3.1.1 (Python 3.5.6 on linux)" generated="20190116 12:47:05.416">
<suite id="s1" name="Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer">
<suite id="s1-s1" name="Docker-Example-Curl1-Enhanced-Version" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl1-Enhanced-Version.robot">
<test id="s1-s1-t1" name="CURL EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response.">
<kw library="SharedKeywordsAndListeners" name="Create Random Malformed Test Data With Radamsa">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw library="Process" name="Run Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20190116 12:47:05.556">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg level="INFO" timestamp="20190116 12:47:05.561">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190116 12:47:05.664">Process completed.</msg>
<status endtime="20190116 12:47:05.664" starttime="20190116 12:47:05.556" status="PASS"></status>
</kw>
<status endtime="20190116 12:47:05.665" starttime="20190116 12:47:05.555" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190116 12:47:05.670">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt'.</msg>
<status endtime="20190116 12:47:06.138" starttime="20190116 12:47:05.666" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg level="INFO" html="yes" timestamp="20190116 12:47:06.140">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<msg level="INFO" timestamp="20190116 12:47:06.146">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Wed, 16 Jan 2019 12:47:06 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d2c0bbacb16c41ac2cf...</msg>
<status endtime="20190116 12:47:06.146" starttime="20190116 12:47:06.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190116 12:47:06.147">HTTP/1.1 500 Internal Server Error
Date: Wed, 16 Jan 2019 12:47:06 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d2c0bbacb16c41ac2cff4985b2708f1e71547642825; expires=Thu, 16-Jan-20 12:47:05 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 49a0b04c822cb4da-RIX

SyntaxError: Unexpected token ¯ in JSON at position 11
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status endtime="20190116 12:47:06.148" starttime="20190116 12:47:06.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.149" starttime="20190116 12:47:06.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.151" starttime="20190116 12:47:06.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.152" starttime="20190116 12:47:06.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status endtime="20190116 12:47:06.153" starttime="20190116 12:47:06.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.154" starttime="20190116 12:47:06.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.155" starttime="20190116 12:47:06.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.156" starttime="20190116 12:47:06.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190116 12:47:06.157" starttime="20190116 12:47:06.157" status="PASS"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status endtime="20190116 12:47:06.157" starttime="20190116 12:47:05.553" critical="yes" status="PASS"></status>
</test>
<kw library="OperatingSystem" name="Remove File" type="teardown">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20190116 12:47:06.163">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<status endtime="20190116 12:47:06.163" starttime="20190116 12:47:06.160" status="PASS"></status>
</kw>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status endtime="20190116 12:47:06.163" starttime="20190116 12:47:05.452" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Docker-Example-Curl2-Enhanced-Version" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl2-Enhanced-Version.robot">
<test id="s1-s2-t1" name="CURL EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response.">
<kw library="SharedKeywordsAndListeners" name="Create Random Malformed Test Data With Radamsa">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw library="Process" name="Run Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20190116 12:47:06.211">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg level="INFO" timestamp="20190116 12:47:06.215">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190116 12:47:06.316">Process completed.</msg>
<status endtime="20190116 12:47:06.317" starttime="20190116 12:47:06.210" status="PASS"></status>
</kw>
<status endtime="20190116 12:47:06.317" starttime="20190116 12:47:06.209" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190116 12:47:06.326">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt'.</msg>
<status endtime="20190116 12:47:06.666" starttime="20190116 12:47:06.318" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg level="INFO" html="yes" timestamp="20190116 12:47:06.668">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<msg level="INFO" timestamp="20190116 12:47:06.674">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Wed, 16 Jan 2019 12:47:06 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d2635689421ea57e476...</msg>
<status endtime="20190116 12:47:06.674" starttime="20190116 12:47:06.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190116 12:47:06.675">HTTP/1.1 500 Internal Server Error
Date: Wed, 16 Jan 2019 12:47:06 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d2635689421ea57e47646e8ac615c6d7f1547642826; expires=Thu, 16-Jan-20 12:47:06 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 49a0b0509fefb4a4-RIX

SyntaxError: Unexpected token ¯ in JSON at position 10
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status endtime="20190116 12:47:06.675" starttime="20190116 12:47:06.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.676" starttime="20190116 12:47:06.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.677" starttime="20190116 12:47:06.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.679" starttime="20190116 12:47:06.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status endtime="20190116 12:47:06.680" starttime="20190116 12:47:06.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.681" starttime="20190116 12:47:06.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.682" starttime="20190116 12:47:06.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status endtime="20190116 12:47:06.683" starttime="20190116 12:47:06.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190116 12:47:06.684" starttime="20190116 12:47:06.683" status="PASS"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status endtime="20190116 12:47:06.684" starttime="20190116 12:47:06.203" critical="yes" status="PASS"></status>
</test>
<kw library="OperatingSystem" name="Remove File" type="teardown">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20190116 12:47:06.689">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<status endtime="20190116 12:47:06.689" starttime="20190116 12:47:06.685" status="PASS"></status>
</kw>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status endtime="20190116 12:47:06.689" starttime="20190116 12:47:06.166" status="PASS"></status>
</suite>
<status endtime="20190116 12:47:06.692" starttime="20190116 12:47:05.418" status="PASS"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="2">Critical Tests</stat>
<stat fail="0" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="2">Regression_Tests</stat>
<stat fail="0" pass="2">Unrefined_And_Created_In_A_Hurry</stat>
</tag>
<suite>
<stat fail="0" pass="2" name="Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer" id="s1">Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer</stat>
<stat fail="0" pass="1" name="Docker-Example-Curl1-Enhanced-Version" id="s1-s1">Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer.Docker-Example-Curl1-Enhanced-Version</stat>
<stat fail="0" pass="1" name="Docker-Example-Curl2-Enhanced-Version" id="s1-s2">Robot Framework test run with cURL in serial and generate random malformed test data using the Radamsa general-purpose fuzzer.Docker-Example-Curl2-Enhanced-Version</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
