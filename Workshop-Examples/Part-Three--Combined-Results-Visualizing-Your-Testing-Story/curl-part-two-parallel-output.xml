<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 3.1.1 (Python 3.5.6 on linux)" generated="20190115 16:48:25.042" rpa="false">
<suite name="Robot Framework test run with cURL in parallel and generate random malformed test data using the Radamsa general-purpose fuzzer" id="s1">
<suite name="Docker-Example-Curl1-Enhanced-Version" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl1-Enhanced-Version.robot" id="s1-s1">
<kw name="Remove File" library="OperatingSystem" type="teardown">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.593" html="yes">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20190115 16:48:24.593" starttime="20190115 16:48:24.590"></status>
</kw>
<test name="CURL EXAMPLE PART TWO - ROBOT FILE ONE : Send a PATCH request to &quot;userId&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response." id="s1-s1-t1">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.005">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg level="INFO" timestamp="20190115 16:48:24.015">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190115 16:48:24.116">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:24.116" starttime="20190115 16:48:24.005"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:24.117" starttime="20190115 16:48:24.004"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.120">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"userId": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt'.</msg>
<status status="PASS" endtime="20190115 16:48:24.573" starttime="20190115 16:48:24.117"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json1.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190115 16:48:24.574" html="yes">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json1.txt&lt;/a&gt;'.</msg>
<msg level="INFO" timestamp="20190115 16:48:24.579">${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=dc3ef413049ae65bca9...</msg>
<status status="PASS" endtime="20190115 16:48:24.580" starttime="20190115 16:48:24.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.580">HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=dc3ef413049ae65bca9751d3af6649b601547570904; expires=Wed, 15-Jan-20 16:48:24 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d46702332744-FRA

SyntaxError: Unexpected token ¯ in JSON at position 11
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status status="PASS" endtime="20190115 16:48:24.580" starttime="20190115 16:48:24.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.581" starttime="20190115 16:48:24.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.582" starttime="20190115 16:48:24.581"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.583" starttime="20190115 16:48:24.582"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.583" starttime="20190115 16:48:24.583"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.585" starttime="20190115 16:48:24.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.586" starttime="20190115 16:48:24.585"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.586" starttime="20190115 16:48:24.586"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_ONE_PATCH_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.587" starttime="20190115 16:48:24.587"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:24.587" critical="yes" starttime="20190115 16:48:24.002"></status>
</test>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:24.593" starttime="20190115 16:48:23.889"></status>
</suite>
<suite name="Docker-Example-Curl2-Enhanced-Version" source="/rfw/Tests/Part-Two--RFW-Strategies-For-Enhancing-Existing-Tests-And-Taking-Your-Test-Process-Further/Docker-Example-Curl2-Enhanced-Version.robot" id="s1-s2">
<kw name="Remove File" library="OperatingSystem" type="teardown">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.768" html="yes">Removed file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20190115 16:48:24.768" starttime="20190115 16:48:24.765"></status>
</kw>
<test name="CURL EXAMPLE PART TWO - ROBOT FILE TWO : Send a PATCH request to &quot;title&quot; for jsonplaceholder.typicode.com/posts/1 using malformed test data and check the response." id="s1-s2-t1">
<kw name="Create Random Malformed Test Data With Radamsa" library="SharedKeywordsAndListeners">
<arguments>
<arg>¯\_(ツ)_/¯</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo "${TEST_DATA}" | radamsa -n 2 &gt; ./malformed-test-data.txt</arg>
<arg>shell=True</arg>
<arg>timeout=20s</arg>
<arg>on_timeout=continue</arg>
<arg>cwd=${PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.018">Starting process:
echo "¯_(ツ)_/¯" | radamsa -n 2 &gt; ./malformed-test-data.txt</msg>
<msg level="INFO" timestamp="20190115 16:48:24.023">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190115 16:48:24.124">Process completed.</msg>
<status status="PASS" endtime="20190115 16:48:24.124" starttime="20190115 16:48:24.017"></status>
</kw>
<status status="PASS" endtime="20190115 16:48:24.124" starttime="20190115 16:48:24.016"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://${BASE_URL}/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.128">Running command 'MALFORMED_TEST_DATA=$(cat /rfw/Shared-Resources/malformed-test-data.txt) &amp;&amp; curl -i -X PATCH -H 'Content-Type: application/json' http://jsonplaceholder.typicode.com/posts/1 -d '{"title": '"$MALFORMED_TEST_DATA"'}' 2&gt;/dev/null &gt; /rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt'.</msg>
<status status="PASS" endtime="20190115 16:48:24.749" starttime="20190115 16:48:24.125"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${PATH}//testlog-check-response-after-using-radamsa-on-the-json2.txt</arg>
</arguments>
<assign>
<var>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</var>
</assign>
<msg level="INFO" timestamp="20190115 16:48:24.750" html="yes">Getting file '&lt;a href="file:///rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt"&gt;/rfw/Shared-Resources/testlog-check-response-after-using-radamsa-on-the-json2.txt&lt;/a&gt;'.</msg>
<msg level="INFO" timestamp="20190115 16:48:24.755">${CURL_ROBOT_FILE_TWO_PUT_RESPONSE} = HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d1b0e6bdaaf486af6cb...</msg>
<status status="PASS" endtime="20190115 16:48:24.755" starttime="20190115 16:48:24.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<msg level="INFO" timestamp="20190115 16:48:24.756">HTTP/1.1 500 Internal Server Error
Date: Tue, 15 Jan 2019 16:48:24 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d1b0e6bdaaf486af6cb8a2765763a5bbd1547570904; expires=Wed, 15-Jan-20 16:48:24 GMT; path=/; domain=.typicode.com; HttpOnly
X-Powered-By: Express
Vary: Origin, Accept-Encoding
Access-Control-Allow-Credentials: true
Cache-Control: no-cache
Pragma: no-cache
Expires: -1
Via: 1.1 vegur
Server: cloudflare
CF-RAY: 4999d46716bd2738-FRA

SyntaxError: Unexpected token ¯ in JSON at position 10
    at JSON.parse (&lt;anonymous&gt;)
    at parse (/app/node_modules/body-parser/lib/types/json.js:89:19)
    at /app/node_modules/body-parser/lib/read.js:121:18
    at invokeCallback (/app/node_modules/raw-body/index.js:224:16)
    at done (/app/node_modules/raw-body/index.js:213:7)
    at IncomingMessage.onEnd (/app/node_modules/raw-body/index.js:273:7)
    at IncomingMessage.emit (events.js:182:13)
    at endReadableNT (_stream_readable.js:1094:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)</msg>
<status status="PASS" endtime="20190115 16:48:24.756" starttime="20190115 16:48:24.755"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.756" starttime="20190115 16:48:24.756"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.757" starttime="20190115 16:48:24.757"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.758" starttime="20190115 16:48:24.757"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.759" starttime="20190115 16:48:24.758"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.760" starttime="20190115 16:48:24.759"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.761" starttime="20190115 16:48:24.760"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>.</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.762" starttime="20190115 16:48:24.761"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${CURL_ROBOT_FILE_TWO_PUT_RESPONSE}</arg>
<arg>200 OK</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190115 16:48:24.762" starttime="20190115 16:48:24.762"></status>
</kw>
<tags>
<tag>Regression_Tests</tag>
<tag>Unrefined_And_Created_In_A_Hurry</tag>
</tags>
<status status="PASS" endtime="20190115 16:48:24.762" critical="yes" starttime="20190115 16:48:24.014"></status>
</test>
<doc>Part Two of the cURL examples has been enhanced by using the SharedKeywordsAndListeners.robot resource file to add randomly generated malformed data to a test through the "Create Random Malformed Test Data With Radamsa" keyword.
This keyword turns the cURL examples into an API fuzz testing tool that can run in serial or in parallel.</doc>
<status status="PASS" endtime="20190115 16:48:24.768" starttime="20190115 16:48:23.899"></status>
</suite>
<status status="PASS" endtime="20190115 16:48:24.770" starttime="20190115 16:48:23.856"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="2">Critical Tests</stat>
<stat fail="0" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="2">Regression_Tests</stat>
<stat fail="0" pass="2">Unrefined_And_Created_In_A_Hurry</stat>
</tag>
<suite>
<stat fail="0" name="Robot Framework test run with cURL in parallel and generate random malformed test data using the Radamsa general-purpose fuzzer" pass="2" id="s1">Robot Framework test run with cURL in parallel and generate random malformed test data using the Radamsa general-purpose fuzzer</stat>
<stat fail="0" name="Docker-Example-Curl1-Enhanced-Version" pass="1" id="s1-s1">Robot Framework test run with cURL in parallel and generate random malformed test data using the Radamsa general-purpose fuzzer.Docker-Example-Curl1-Enhanced-Version</stat>
<stat fail="0" name="Docker-Example-Curl2-Enhanced-Version" pass="1" id="s1-s2">Robot Framework test run with cURL in parallel and generate random malformed test data using the Radamsa general-purpose fuzzer.Docker-Example-Curl2-Enhanced-Version</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
